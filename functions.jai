WorldManifold_initialize :: (self: *b2WorldManifold, manifold: *b2Manifold, xf_a: *b2Transform, radius_a: float, xf_b: *b2Transform, radius_b: float) -> void #foreign box2d;
get_point_states :: (s1: *b2PointState, s2: *b2PointState, m1: *b2Manifold, m2: *b2Manifold) -> void #foreign box2d;
AABB_is_valid :: (self: *b2AABB) -> bool #foreign box2d;
AABB_get_center :: (self: *b2AABB) -> Vector2 #foreign box2d;
AABB_get_extents :: (self: *b2AABB) -> Vector2 #foreign box2d;
AABB_get_perimeter :: (self: *b2AABB) -> float #foreign box2d;
AABB_combine :: (self: *b2AABB, aabb: *b2AABB) -> void #foreign box2d;
AABB_combine_two :: (self: *b2AABB, aabb1: *b2AABB, aabb2: *b2AABB) -> void #foreign box2d;
AABB_contains :: (self: *b2AABB, aabb: *b2AABB) -> bool #foreign box2d;
AABB_ray_cast :: (self: *b2AABB, output: *b2RayCastOutput, input: *b2RayCastInput) -> bool #foreign box2d;
collide_circles :: (manifold: *b2Manifold, circleA: *b2CircleShape, xfA: *b2Transform, circleB: *b2CircleShape, xfB: *b2Transform) -> void #foreign box2d;
collide_polygon_and_circle :: (manifold: *b2Manifold, polygonA: *b2PolygonShape, xfA: *b2Transform, circleB: *b2CircleShape, xfB: *b2Transform) -> void #foreign box2d;
collide_polygons :: (manifold: *b2Manifold, polygonA: *b2PolygonShape, xfA: *b2Transform, polygonB: *b2PolygonShape, xfB: *b2Transform) -> void #foreign box2d;
collide_edge_and_circle :: (manifold: *b2Manifold, polygonA: *b2EdgeShape, xfA: *b2Transform, circleB: *b2CircleShape, xfB: *b2Transform) -> void #foreign box2d;
collide_edge_and_polygon :: (manifold: *b2Manifold, edgeA: *b2EdgeShape, xfA: *b2Transform, circleB: *b2PolygonShape, xfB: *b2Transform) -> void #foreign box2d;
clip_segment_to_line :: (vOut: *b2ClipVertex, vIn: *b2ClipVertex, normal: *Vector2, offset: float, vertexIndexA: s32) -> u32 #foreign box2d;
test_overlap :: (shapeA: *b2Shape, indexA: s32, shapeB: *b2Shape, indexB: s32, xfA: *b2Transform, xfB: *b2Transform) -> bool #foreign box2d;
test_overlap_aabb :: (a: *b2AABB, b: *b2AABB) -> bool #foreign box2d;
Draw_new :: (drawPolygon: DrawPolygonCB, drawSolidPolygon: DrawSolidPolygonCB, drawCircle: DrawCircleCB, drawSolidCircle: DrawSolidCircleCB, drawParticles: DrawParticlesCB, drawSegment: DrawSegmentCB, drawTransform: DrawTransformCB, drawPoint: DrawPointCB) -> *Draw #foreign box2d;
Draw_create :: (drawPolygon: DrawPolygonCB, drawSolidPolygon: DrawSolidPolygonCB, drawCircle: DrawCircleCB, drawSolidCircle: DrawSolidCircleCB, drawParticles: DrawParticlesCB, drawSegment: DrawSegmentCB, drawTransform: DrawTransformCB, drawPoint: DrawPointCB) -> Draw #foreign box2d;
Draw_set_flags :: (self: *b2Draw, flags: u32) -> void #foreign box2d;
Draw_get_flags :: (self: *b2Draw) -> u32 #foreign box2d;
Draw_append_flags :: (self: *b2Draw, flags: u32) -> void #foreign box2d;
Draw_clear_flags :: (self: *b2Draw, flags: u32) -> void #foreign box2d;
BodyDef_new :: () -> *b2BodyDef #foreign box2d;
BodyDef_create :: () -> b2BodyDef #foreign box2d;
BodyDef_set_position :: (self: *b2BodyDef, positionX: float32, positionY: float32) -> void #foreign box2d;
Body_create_fixture :: (self: *b2Body, def: *b2FixtureDef) -> *b2Fixture #foreign box2d;
Body_create_fixture_density :: (self: *b2Body, shape: *b2Shape, density: float) -> *b2Fixture #foreign box2d;
Body_destroy_fixture :: (self: *b2Body, fixture: *b2Fixture) -> void #foreign box2d;
Body_set_transform :: (self: *b2Body, pos: *Vector2, angle: float) -> void #foreign box2d;
Body_get_transform :: (self: *b2Body) -> b2Transform #foreign box2d;
Body_get_position :: (self: *b2Body) -> Vector2 #foreign box2d;
Body_get_angle :: (self: *b2Body) -> float #foreign box2d;
Body_get_world_center :: (self: *b2Body) -> Vector2 #foreign box2d;
Body_get_local_center :: (self: *b2Body) -> Vector2 #foreign box2d;
Body_set_linear_velocity :: (self: *b2Body, v: *Vector2) -> void #foreign box2d;
Body_get_linear_velocity :: (self: *b2Body) -> Vector2 #foreign box2d;
Body_set_angular_velocity :: (self: *b2Body, omega: float) -> void #foreign box2d;
Body_get_angular_velocity :: (self: *b2Body) -> float #foreign box2d;
Body_apply_force :: (self: *b2Body, force: *Vector2, point: *Vector2, wake: bool) -> void #foreign box2d;
Body_apply_force_to_center :: (self: *b2Body, force: *Vector2, wake: bool) -> void #foreign box2d;
Body_apply_torque :: (self: *b2Body, torque: float, wake: bool) -> void #foreign box2d;
Body_apply_linear_impulse :: (self: *b2Body, impulse: *Vector2, point: *Vector2, wake: bool) -> void #foreign box2d;
Body_apply_linear_impulse_to_center :: (self: *b2Body, impulse: *Vector2, wake: bool) -> void #foreign box2d;
Body_apply_angular_impulse :: (self: *b2Body, impulse: float, wake: bool) -> void #foreign box2d;
Body_get_mass :: (self: *b2Body) -> float #foreign box2d;
Body_get_inertia :: (self: *b2Body) -> float #foreign box2d;
Body_get_mass_data :: (self: *b2Body) -> b2MassData #foreign box2d;
Body_set_mass_data :: (self: *b2Body, data: *b2MassData) -> void #foreign box2d;
Body_reset_mass_data :: (self: *b2Body) -> void #foreign box2d;
Body_get_world_point :: (self: *b2Body, local: *Vector2) -> Vector2 #foreign box2d;
Body_get_world_vector :: (self: *b2Body, local: *Vector2) -> Vector2 #foreign box2d;
Body_get_local_point :: (self: *b2Body, world: *Vector2) -> Vector2 #foreign box2d;
Body_get_local_vector :: (self: *b2Body, world: *Vector2) -> Vector2 #foreign box2d;
Body_get_linear_velocity_from_world_point :: (self: *b2Body, point: *Vector2) -> Vector2 #foreign box2d;
Body_get_linear_velocity_from_local_point :: (self: *b2Body, point: *Vector2) -> Vector2 #foreign box2d;
Body_get_linear_damping :: (self: *b2Body) -> float #foreign box2d;
Body_set_linear_damping :: (self: *b2Body, damping: float) -> void #foreign box2d;
Body_get_angular_damping :: (self: *b2Body) -> float #foreign box2d;
Body_set_angular_damping :: (self: *b2Body, damping: float) -> void #foreign box2d;
Body_get_gravity_scale :: (self: *b2Body) -> float #foreign box2d;
Body_set_gravity_scale :: (self: *b2Body, scale: float) -> void #foreign box2d;
Body_set_type :: (self: *b2Body, type: b2BodyType) -> void #foreign box2d;
Body_get_type :: (self: *b2Body) -> b2BodyType #foreign box2d;
Body_set_bullet :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_bullet :: (self: *b2Body) -> bool #foreign box2d;
Body_set_sleeping_allowed :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_sleeping_allowed :: (self: *b2Body) -> bool #foreign box2d;
Body_set_awake :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_awake :: (self: *b2Body) -> bool #foreign box2d;
Body_set_enabled :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_enabled :: (self: *b2Body) -> bool #foreign box2d;
Body_set_fixed_rotation :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_fixed_rotation :: (self: *b2Body) -> bool #foreign box2d;
Body_get_fixture_list :: (self: *b2Body) -> *b2Fixture #foreign box2d;
Body_get_joint_list :: (self: *b2Body) -> *b2JointEdge #foreign box2d;
Body_get_contact_list :: (self: *b2Body) -> *b2ContactEdge #foreign box2d;
Body_get_next :: (self: *b2Body) -> *b2Body #foreign box2d;
Body_get_user_data :: (self: *b2Body) -> *void #foreign box2d;
Body_set_user_data :: (self: *b2Body, data: *void) -> void #foreign box2d;
Body_get_world :: (self: *b2Body) -> *b2World #foreign box2d;
Body_dump :: (self: *b2Body) -> void #foreign box2d;
Body_get_position_x :: (self: *b2Body) -> float32 #foreign box2d;
Body_get_position_y :: (self: *b2Body) -> float32 #foreign box2d;
Filter_new :: () -> *b2Filter #foreign box2d;
Filter_create :: () -> b2Filter #foreign box2d;
FixtureDef_new :: () -> *b2FixtureDef #foreign box2d;
FixtureDef_create :: () -> b2FixtureDef #foreign box2d;
Fixture_get_type :: (self: *b2Fixture) -> b2ShapeType #foreign box2d;
Fixture_get_shape :: (self: *b2Fixture) -> *b2Shape #foreign box2d;
Fixture_set_sensor :: (self: *b2Fixture, flag: bool) -> void #foreign box2d;
Fixture_is_sensor :: (self: *b2Fixture) -> bool #foreign box2d;
Fixture_set_filter_data :: (self: *b2Fixture, filter: *b2Filter) -> void #foreign box2d;
Fixture_get_filter_data :: (self: *b2Fixture) -> b2Filter #foreign box2d;
Fixture_refilter :: (self: *b2Fixture) -> void #foreign box2d;
Fixture_get_body :: (self: *b2Fixture) -> *b2Body #foreign box2d;
Fixture_get_next :: (self: *b2Fixture) -> *b2Fixture #foreign box2d;
Fixture_get_user_data :: (self: *b2Fixture) -> *void #foreign box2d;
Fixture_set_user_data :: (self: *b2Fixture, data: *void) -> void #foreign box2d;
Fixture_test_point :: (self: *b2Fixture, p: *Vector2) -> bool #foreign box2d;
Fixture_compute_distance :: (self: *b2Fixture, p: *Vector2, distance: *float32, normal: *Vector2, childIndex: s32) -> void #foreign box2d;
Fixture_ray_cast :: (self: *b2Fixture, output: *b2RayCastOutput, input: *b2RayCastInput, child_id: s32) -> bool #foreign box2d;
Fixture_get_mass_data :: (self: *b2Fixture, data: *b2MassData) -> void #foreign box2d;
Fixture_set_density :: (self: *b2Fixture, density: float) -> void #foreign box2d;
Fixture_get_density :: (self: *b2Fixture) -> float #foreign box2d;
Fixture_get_friction :: (self: *b2Fixture) -> float #foreign box2d;
Fixture_set_friction :: (self: *b2Fixture, friction: float) -> void #foreign box2d;
Fixture_get_restitution :: (self: *b2Fixture) -> float #foreign box2d;
Fixture_set_restitution :: (self: *b2Fixture, restitution: float) -> void #foreign box2d;
Fixture_get_restitution_threshold :: (self: *b2Fixture) -> float #foreign box2d;
Fixture_set_restitution_threshold :: (self: *b2Fixture, threshold: float) -> void #foreign box2d;
Fixture_get_aabb :: (self: *b2Fixture, childIndex: s32) -> b2AABB #foreign box2d;
Fixture_dump :: (self: *b2Fixture, bodyIndex: s32) -> void #foreign box2d;
World_new :: (gravity: Vector2) -> *b2World #foreign box2d;
World_create :: (gravity: Vector2) -> b2World #foreign box2d;
World_set_destruction_listener :: (self: *b2World, listener: *b2DestructionListener) -> void #foreign box2d;
World_set_contact_filter :: (self: *b2World, filter: *b2ContactFilter) -> void #foreign box2d;
World_set_contact_listener :: (self: *b2World, listener: *b2ContactListener) -> void #foreign box2d;
World_set_debug_draw :: (self: *b2World, debugDraw: *b2Draw) -> void #foreign box2d;
World_create_body :: (self: *b2World, def: *b2BodyDef) -> *b2Body #foreign box2d;
World_destroy_body :: (self: *b2World, body: *b2Body) -> void #foreign box2d;
World_create_joint :: (self: *b2World, def: *b2JointDef) -> *b2Joint #foreign box2d;
World_destroy_joint :: (self: *b2World, joint: *b2Joint) -> void #foreign box2d;
World_create_particle_system :: (self: *b2World, def: *b2ParticleSystemDef) -> *b2ParticleSystem #foreign box2d;
World_destroy_particle_system :: (self: *b2World, p: *b2ParticleSystem) -> void #foreign box2d;
World_step :: (self: *b2World, timeStep: float, velocityIterations: s32, positionIterations: s32, particleIterations: s32) -> void #foreign box2d;
World_calculate_reasonable_particle_iterations :: (self: *b2World, timeStep: float32) -> int #foreign box2d;
World_clear_forces :: (self: *b2World) -> void #foreign box2d;
World_debug_draw :: (self: *b2World) -> void #foreign box2d;
World_query_aabb :: (self: *b2World, callback: *b2QueryCallback, aabb: *b2AABB) -> void #foreign box2d;
World_query_shape_aabb :: (self: *b2World, callback: *b2QueryCallback, shape: *b2Shape, xf: *b2Transform) -> void #foreign box2d;
World_ray_cast :: (self: *b2World, callback: *b2RayCastCallback, p1: *Vector2, p2: *Vector2) -> void #foreign box2d;
World_get_body_list :: (self: *b2World) -> *b2Body #foreign box2d;
World_get_joint_list :: (self: *b2World) -> *b2Joint #foreign box2d;
World_get_particle_system_list :: (self: *b2World) -> *b2ParticleSystem #foreign box2d;
World_get_contact_list :: (self: *b2World) -> *b2Contact #foreign box2d;
World_set_allow_sleeping :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_allow_sleeping :: (self: *b2World) -> bool #foreign box2d;
World_set_warm_starting :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_warm_starting :: (self: *b2World) -> bool #foreign box2d;
World_set_continuous_physics :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_continuous_physics :: (self: *b2World) -> bool #foreign box2d;
World_set_sub_stepping :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_sub_stepping :: (self: *b2World) -> bool #foreign box2d;
World_get_proxy_count :: (self: *b2World) -> s32 #foreign box2d;
World_get_body_count :: (self: *b2World) -> s32 #foreign box2d;
World_get_joint_count :: (self: *b2World) -> s32 #foreign box2d;
World_get_contact_count :: (self: *b2World) -> s32 #foreign box2d;
World_get_tree_height :: (self: *b2World) -> s32 #foreign box2d;
World_get_tree_balance :: (self: *b2World) -> s32 #foreign box2d;
World_get_tree_quality :: (self: *b2World) -> float #foreign box2d;
World_set_gravity :: (self: *b2World, gravity: *Vector2) -> void #foreign box2d;
World_get_gravity :: (self: *b2World) -> Vector2 #foreign box2d;
World_is_locked :: (self: *b2World) -> bool #foreign box2d;
World_set_auto_clear_forces :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_auto_clear_forces :: (self: *b2World) -> bool #foreign box2d;
World_shift_origin :: (self: *b2World, origin: *Vector2) -> void #foreign box2d;
World_get_contact_manager :: (self: *b2World) -> b2ContactManager #foreign box2d;
World_get_profile :: (self: *b2World) -> b2Profile #foreign box2d;
World_dump :: (self: *b2World) -> void #foreign box2d;
DestructionListener_new :: (sayGoodbyeJoint: SayGoodbyeJointCB, sayGoodbyeFixture: SayGoodbyeFixtureCB, sayGoodbyeParticleGroup: SayGoodbyeParticleGroupCB) -> *DestructionListener #foreign box2d;
DestructionListener_create :: (sayGoodbyeJoint: SayGoodbyeJointCB, sayGoodbyeFixture: SayGoodbyeFixtureCB, sayGoodbyeParticleGroup: SayGoodbyeParticleGroupCB) -> DestructionListener #foreign box2d;
ContactFilter_new :: (shouldCollide: ShouldCollideCB, shouldCollideFixtureParticle: ShouldCollideFixtureParticleCB, shouldCollideParticleParticle: ShouldCollideParticleParticleCB) -> *ContactFilter #foreign box2d;
ContactFilter_create :: (shouldCollide: ShouldCollideCB, shouldCollideFixtureParticle: ShouldCollideFixtureParticleCB, shouldCollideParticleParticle: ShouldCollideParticleParticleCB) -> ContactFilter #foreign box2d;
ContactListener_new :: (beginContact: BeginContactCB, endContact: EndContactCB, beginContactParticleBody: BeginContactParticleBodyCB, endContactFixtureParticle: EndContactFixtureParticleCB, beginContactParticle: BeginContactParticleCB, endContactParticle: EndContactParticleCB, preSolve: PreSolveCB, postSolve: PostSolveCB) -> *ContactListener #foreign box2d;
ContactListener_create :: (beginContact: BeginContactCB, endContact: EndContactCB, beginContactParticleBody: BeginContactParticleBodyCB, endContactFixtureParticle: EndContactFixtureParticleCB, beginContactParticle: BeginContactParticleCB, endContactParticle: EndContactParticleCB, preSolve: PreSolveCB, postSolve: PostSolveCB) -> ContactListener #foreign box2d;
QueryCallback_new :: (reportFixture: ReportFixtureCB, reportParticle: ReportParticleCB, shouldQueryParticleSystem: ShouldQueryParticleSystemCB) -> *QueryCallback #foreign box2d;
QueryCallback_create :: (reportFixture: ReportFixtureCB, reportParticle: ReportParticleCB, shouldQueryParticleSystem: ShouldQueryParticleSystemCB) -> QueryCallback #foreign box2d;
RayCastCallback_new :: (reportFixture: ReportFixtureRayCastCB, reportParticle: ReportParticleRayCastCB, shouldQueryParticleSystem: ShouldQueryParticleSystemRayCastCB) -> *RayCastCallback #foreign box2d;
RayCastCallback_create :: (reportFixture: ReportFixtureRayCastCB, reportParticle: ReportParticleRayCastCB, shouldQueryParticleSystem: ShouldQueryParticleSystemRayCastCB) -> RayCastCallback #foreign box2d;
ParticleDef_new :: () -> *b2ParticleDef #foreign box2d;
ParticleDef_create :: () -> b2ParticleDef #foreign box2d;
b2_calculate_particle_iterations :: (gravity: float32, radius: float32, timeStep: float32) -> s32 #foreign box2d;
ParticleGroupDef_new :: () -> *b2ParticleGroupDef #foreign box2d;
ParticleGroupDef_create :: () -> b2ParticleGroupDef #foreign box2d;
ParticleGroupDef_set_circle_shapes_from_vertex_list :: (self: *b2ParticleGroupDef, inBuf: *void, numShapes: int, radius: float) -> void #foreign box2d;
ParticleGroupDef_set_position :: (self: *b2ParticleGroupDef, x: float32, y: float32) -> void #foreign box2d;
ParticleGroupDef_set_color :: (self: *b2ParticleGroupDef, r: s32, g: s32, b: s32, a: s32) -> void #foreign box2d;
ParticleGroup_get_next :: (self: *b2ParticleGroup) -> *b2ParticleGroup #foreign box2d;
ParticleGroup_get_particle_system :: (self: *b2ParticleGroup) -> *b2ParticleSystem #foreign box2d;
ParticleGroup_get_particle_count :: (self: *b2ParticleGroup) -> s32 #foreign box2d;
ParticleGroup_get_buffer_index :: (self: *b2ParticleGroup) -> s32 #foreign box2d;
ParticleGroup_contains_particle :: (self: *b2ParticleGroup, index: s32) -> bool #foreign box2d;
ParticleGroup_get_all_particle_flags :: (self: *b2ParticleGroup) -> u32 #foreign box2d;
ParticleGroup_get_group_flags :: (self: *b2ParticleGroup) -> u32 #foreign box2d;
ParticleGroup_set_group_flags :: (self: *b2ParticleGroup, flags: u32) -> void #foreign box2d;
ParticleGroup_get_mass :: (self: *b2ParticleGroup) -> float32 #foreign box2d;
ParticleGroup_get_inertia :: (self: *b2ParticleGroup) -> float32 #foreign box2d;
ParticleGroup_get_center :: (self: *b2ParticleGroup) -> Vector2 #foreign box2d;
ParticleGroup_get_linear_velocity :: (self: *b2ParticleGroup) -> Vector2 #foreign box2d;
ParticleGroup_get_angular_velocity :: (self: *b2ParticleGroup) -> float32 #foreign box2d;
ParticleGroup_get_transform :: (self: *b2ParticleGroup) -> b2Transform #foreign box2d;
ParticleGroup_get_position :: (self: *b2ParticleGroup) -> Vector2 #foreign box2d;
ParticleGroup_get_angle :: (self: *b2ParticleGroup) -> float32 #foreign box2d;
ParticleGroup_get_linear_velocity_from_world_point :: (self: *b2ParticleGroup, worldPoint: *Vector2) -> Vector2 #foreign box2d;
ParticleGroup_get_user_data :: (self: *b2ParticleGroup) -> *void #foreign box2d;
ParticleGroup_set_user_data :: (self: *b2ParticleGroup, data: *void) -> void #foreign box2d;
ParticleGroup_apply_force :: (self: *b2ParticleGroup, force: *Vector2) -> void #foreign box2d;
ParticleGroup_apply_linear_impulse :: (self: *b2ParticleGroup, impulse: *Vector2) -> void #foreign box2d;
ParticleGroup_destroy_particles :: (self: *b2ParticleGroup, callDestructionListener: bool) -> void #foreign box2d;
ParticleContact_set_indices :: (self: *b2ParticleContact, a: s32, b: s32) -> void #foreign box2d;
ParticleContact_set_weight :: (self: *b2ParticleContact, w: float32) -> void #foreign box2d;
ParticleContact_set_normal :: (self: *b2ParticleContact, n: *Vector2) -> void #foreign box2d;
ParticleContact_set_flags :: (self: *b2ParticleContact, f: u32) -> void #foreign box2d;
ParticleContact_get_index_a :: (self: *b2ParticleContact) -> s32 #foreign box2d;
ParticleContact_get_index_b :: (self: *b2ParticleContact) -> s32 #foreign box2d;
ParticleContact_get_weight :: (self: *b2ParticleContact) -> float32 #foreign box2d;
ParticleContact_get_normal :: (self: *b2ParticleContact) -> Vector2 #foreign box2d;
ParticleContact_get_flags :: (self: *b2ParticleContact) -> u32 #foreign box2d;
ParticleSystemDef_new :: () -> *b2ParticleSystemDef #foreign box2d;
ParticleSystemDef_create :: () -> b2ParticleSystemDef #foreign box2d;
ParticleSystem_create_particle :: (self: *b2ParticleSystem, def: *b2ParticleDef) -> s32 #foreign box2d;
ParticleSystem_get_particle_handle_from_index :: (self: *b2ParticleSystem, index: s32) -> *b2ParticleHandle #foreign box2d;
ParticleSystem_destroy_particle :: (self: *b2ParticleSystem, index: s32, callDestructionListener: bool) -> void #foreign box2d;
ParticleSystem_destroy_oldest_particle :: (self: *b2ParticleSystem, index: s32, callDestructionListener: bool) -> void #foreign box2d;
ParticleSystem_destroy_particles_in_shape :: (self: *b2ParticleSystem, shape: *b2Shape, xf: *b2Transform, callDestructionListener: bool) -> s32 #foreign box2d;
ParticleSystem_create_particle_group :: (self: *b2ParticleSystem, def: *b2ParticleGroupDef) -> *b2ParticleGroup #foreign box2d;
ParticleSystem_join_particle_groups :: (self: *b2ParticleSystem, groupA: *b2ParticleGroup, groupB: *b2ParticleGroup) -> void #foreign box2d;
ParticleSystem_split_particle_group :: (self: *b2ParticleSystem, group: *b2ParticleGroup) -> void #foreign box2d;
ParticleSystem_get_particle_group_list :: (self: *b2ParticleSystem) -> *b2ParticleGroup #foreign box2d;
ParticleSystem_get_particle_group_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_get_particle_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_get_max_particle_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_set_max_particle_count :: (self: *b2ParticleSystem, count: s32) -> void #foreign box2d;
ParticleSystem_get_all_particle_flags :: (self: *b2ParticleSystem) -> u32 #foreign box2d;
ParticleSystem_get_all_group_flags :: (self: *b2ParticleSystem) -> u32 #foreign box2d;
ParticleSystem_set_paused :: (self: *b2ParticleSystem, paused: bool) -> void #foreign box2d;
ParticleSystem_get_paused :: (self: *b2ParticleSystem) -> bool #foreign box2d;
ParticleSystem_set_density :: (self: *b2ParticleSystem, density: float32) -> void #foreign box2d;
ParticleSystem_get_density :: (self: *b2ParticleSystem) -> float32 #foreign box2d;
ParticleSystem_set_gravity_scale :: (self: *b2ParticleSystem, gravityScale: float32) -> void #foreign box2d;
ParticleSystem_get_gravity_scale :: (self: *b2ParticleSystem) -> float32 #foreign box2d;
ParticleSystem_set_damping :: (self: *b2ParticleSystem, damping: float32) -> void #foreign box2d;
ParticleSystem_get_damping :: (self: *b2ParticleSystem) -> float32 #foreign box2d;
ParticleSystem_set_static_pressure_iterations :: (self: *b2ParticleSystem, iterations: s32) -> void #foreign box2d;
ParticleSystem_get_static_pressure_iterations :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_set_radius :: (self: *b2ParticleSystem, radius: float32) -> void #foreign box2d;
ParticleSystem_get_radius :: (self: *b2ParticleSystem) -> float32 #foreign box2d;
ParticleSystem_get_position_buffer :: (self: *b2ParticleSystem) -> *Vector2 #foreign box2d;
ParticleSystem_get_velocity_buffer :: (self: *b2ParticleSystem) -> *Vector2 #foreign box2d;
ParticleSystem_get_color_buffer :: (self: *b2ParticleSystem) -> *b2ParticleColor #foreign box2d;
ParticleSystem_get_group_buffer :: (self: *b2ParticleSystem) -> **b2ParticleGroup #foreign box2d;
ParticleSystem_get_weight_buffer :: (self: *b2ParticleSystem) -> *float32 #foreign box2d;
ParticleSystem_get_user_data_buffer :: (self: *b2ParticleSystem) -> **void #foreign box2d;
ParticleSystem_get_flags_buffer :: (self: *b2ParticleSystem) -> *u32 #foreign box2d;
ParticleSystem_set_particle_flags :: (self: *b2ParticleSystem, index: s32, flags: u32) -> void #foreign box2d;
ParticleSystem_get_particle_flags :: (self: *b2ParticleSystem, index: s32) -> u32 #foreign box2d;
ParticleSystem_set_flags_buffer :: (self: *b2ParticleSystem, buffer: *u32, capacity: s32) -> void #foreign box2d;
ParticleSystem_set_position_buffer :: (self: *b2ParticleSystem, buffer: *Vector2, capacity: s32) -> void #foreign box2d;
ParticleSystem_set_velocity_buffer :: (self: *b2ParticleSystem, buffer: *Vector2, capacity: s32) -> void #foreign box2d;
ParticleSystem_set_color_buffer :: (self: *b2ParticleSystem, buffer: *b2ParticleColor, capacity: s32) -> void #foreign box2d;
ParticleSystem_set_user_data_buffer :: (self: *b2ParticleSystem, buffer: **void, capacity: s32) -> void #foreign box2d;
ParticleSystem_get_contacts :: (self: *b2ParticleSystem) -> *b2ParticleContact #foreign box2d;
ParticleSystem_get_contact_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_get_body_contacts :: (self: *b2ParticleSystem) -> *b2ParticleBodyContact #foreign box2d;
ParticleSystem_get_body_contact_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_get_pairs :: (self: *b2ParticleSystem) -> *b2ParticlePair #foreign box2d;
ParticleSystem_get_pair_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_get_triads :: (self: *b2ParticleSystem) -> *b2ParticleTriad #foreign box2d;
ParticleSystem_get_triad_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_set_stuck_threshold :: (self: *b2ParticleSystem, iterations: s32) -> void #foreign box2d;
ParticleSystem_get_stuck_candidates :: (self: *b2ParticleSystem) -> *s32 #foreign box2d;
ParticleSystem_get_stuck_candidate_count :: (self: *b2ParticleSystem) -> s32 #foreign box2d;
ParticleSystem_compute_collision_energy :: (self: *b2ParticleSystem) -> float32 #foreign box2d;
ParticleSystem_set_strict_contact_check :: (self: *b2ParticleSystem, enabled: bool) -> void #foreign box2d;
ParticleSystem_get_strict_contact_check :: (self: *b2ParticleSystem) -> bool #foreign box2d;
ParticleSystem_set_particle_lifetime :: (self: *b2ParticleSystem, index: s32, lifetime: float32) -> void #foreign box2d;
ParticleSystem_get_particle_lifetime :: (self: *b2ParticleSystem, index: s32) -> float32 #foreign box2d;
ParticleSystem_set_destruction_by_age :: (self: *b2ParticleSystem, enable: bool) -> void #foreign box2d;
ParticleSystem_get_destruction_by_age :: (self: *b2ParticleSystem) -> bool #foreign box2d;
ParticleSystem_get_expiration_time_buffer :: (self: *b2ParticleSystem) -> *s32 #foreign box2d;
ParticleSystem_expiration_time_to_lifetime :: (self: *b2ParticleSystem, expirationTime: s32) -> float32 #foreign box2d;
ParticleSystem_get_index_by_expiration_time_buffer :: (self: *b2ParticleSystem) -> *s32 #foreign box2d;
ParticleSystem_particle_apply_linear_impulse :: (self: *b2ParticleSystem, index: s32, impulse: *Vector2) -> void #foreign box2d;
ParticleSystem_apply_linear_impulse :: (self: *b2ParticleSystem, firstIndex: s32, lastIndex: s32, impulse: *Vector2) -> void #foreign box2d;
ParticleSystem_particle_apply_force :: (self: *b2ParticleSystem, index: s32, force: *Vector2) -> void #foreign box2d;
ParticleSystem_apply_force :: (self: *b2ParticleSystem, firstIndex: s32, lastIndex: s32, force: *Vector2) -> void #foreign box2d;
ParticleSystem_get_next :: (self: *b2ParticleSystem) -> *b2ParticleSystem #foreign box2d;
ParticleSystem_query_aabb :: (self: *b2ParticleSystem, callback: *b2QueryCallback, aabb: *b2AABB) -> void #foreign box2d;
ParticleSystem_query_shape_aabb :: (self: *b2ParticleSystem, callback: *b2QueryCallback, shape: *b2Shape, xf: *b2Transform) -> void #foreign box2d;
ParticleSystem_ray_cast :: (self: *b2ParticleSystem, callback: *b2RayCastCallback, point1: *Vector2, point2: *Vector2) -> void #foreign box2d;
ParticleSystem_compute_aabb :: (self: *b2ParticleSystem, aabb: *b2AABB) -> void #foreign box2d;
ParticleSystem_set_particle_velocity :: (self: *b2ParticleSystem, index: s32, vx: float32, vy: float32) -> void #foreign box2d;
ParticleSystem_get_particle_position_x :: (self: *b2ParticleSystem, index: s32) -> float #foreign box2d;
ParticleSystem_get_particle_position_y :: (self: *b2ParticleSystem, index: s32) -> float #foreign box2d;
ParticleSystem_copy_position_buffer :: (self: *b2ParticleSystem, startIndex: int, numParticles: int, outBuf: *void, size: int) -> int #foreign box2d;
ParticleSystem_copy_color_buffer :: (self: *b2ParticleSystem, startIndex: int, numParticles: int, outBuf: *void, size: int) -> int #foreign box2d;
ParticleSystem_copy_weight_buffer :: (self: *b2ParticleSystem, startIndex: int, numParticles: int, outBuf: *void, size: int) -> int #foreign box2d;
ChainShape_new :: () -> *b2ChainShape #foreign box2d;
ChainShape_create :: () -> b2ChainShape #foreign box2d;
ChainShape_clear :: (self: *b2ChainShape) -> void #foreign box2d;
ChainShape_create_loop :: (self: *b2ChainShape, vertices: *Vector2, count: s32) -> void #foreign box2d;
ChainShape_create_chain :: (self: *b2ChainShape, vertices: *Vector2, count: s32, prevVertex: Vector2, nextVertex: Vector2) -> void #foreign box2d;
ChainShape_clone :: (self: *b2ChainShape, allocator: *b2BlockAllocator) -> *b2Shape #foreign box2d;
ChainShape_get_child_count :: (self: *b2ChainShape) -> s32 #foreign box2d;
ChainShape_get_child_edge :: (self: *b2ChainShape, edge: *b2EdgeShape, index: s32) -> void #foreign box2d;
ChainShape_compute_distance :: (self: *b2ChainShape, xf: *b2Transform, p: *Vector2, distance: *float32, normal: *Vector2, childIndex: s32) -> void #foreign box2d;
ChainShape_test_point :: (self: *b2ChainShape, transform: *b2Transform, p: *Vector2) -> bool #foreign box2d;
ChainShape_ray_cast :: (self: *b2ChainShape, output: *b2RayCastOutput, input: *b2RayCastInput, transform: *b2Transform, childIndex: s32) -> bool #foreign box2d;
ChainShape_compute_aabb :: (self: *b2ChainShape, aabb: *b2AABB, transform: *b2Transform, childIndex: s32) -> void #foreign box2d;
ChainShape_compute_mass :: (self: *b2ChainShape, massData: *b2MassData, density: float) -> void #foreign box2d;
CircleShape_new :: () -> *b2CircleShape #foreign box2d;
CircleShape_create :: () -> b2CircleShape #foreign box2d;
CircleShape_test_point :: (self: *b2CircleShape, transform: *b2Transform, p: *Vector2) -> bool #foreign box2d;
CircleShape_compute_distance :: (self: *b2CircleShape, xf: *b2Transform, p: *Vector2, distance: *float32, normal: *Vector2, childIndex: s32) -> void #foreign box2d;
CircleShape_ray_cast :: (self: *b2CircleShape, output: *b2RayCastOutput, input: *b2RayCastInput, transform: *b2Transform, childIndex: s32) -> bool #foreign box2d;
CircleShape_compute_aabb :: (self: *b2CircleShape, aabb: *b2AABB, transform: *b2Transform, childIndex: s32) -> void #foreign box2d;
CircleShape_compute_mass :: (self: *b2CircleShape, massData: *b2MassData, density: float) -> void #foreign box2d;
CircleShape_set_position :: (self: *b2CircleShape, x: float32, y: float32) -> void #foreign box2d;
CircleShape_get_position_x :: (self: *b2CircleShape) -> float32 #foreign box2d;
CircleShape_get_position_y :: (self: *b2CircleShape) -> float32 #foreign box2d;
EdgeShape_new :: () -> *b2EdgeShape #foreign box2d;
EdgeShape_create :: () -> b2EdgeShape #foreign box2d;
EdgeShape_set_one_sided :: (self: *b2EdgeShape, v0: *Vector2, v1: *Vector2, v2: *Vector2, v3: *Vector2) -> void #foreign box2d;
EdgeShape_set_two_sided :: (self: *b2EdgeShape, v1: *Vector2, v2: *Vector2) -> void #foreign box2d;
EdgeShape_clone :: (self: *b2EdgeShape, allocator: *b2BlockAllocator) -> *b2Shape #foreign box2d;
EdgeShape_get_child_count :: (self: *b2EdgeShape) -> s32 #foreign box2d;
EdgeShape_test_point :: (self: *b2EdgeShape, transform: *b2Transform, p: *Vector2) -> bool #foreign box2d;
EdgeShape_compute_distance :: (self: *b2EdgeShape, xf: *b2Transform, p: *Vector2, distance: *float32, normal: *Vector2, childIndex: s32) -> void #foreign box2d;
EdgeShape_ray_cast :: (self: *b2EdgeShape, output: *b2RayCastOutput, input: *b2RayCastInput, transform: *b2Transform, childIndex: s32) -> bool #foreign box2d;
EdgeShape_compute_aabb :: (self: *b2EdgeShape, aabb: *b2AABB, transform: *b2Transform, childIndex: s32) -> void #foreign box2d;
EdgeShape_compute_mass :: (self: *b2EdgeShape, massData: *b2MassData, density: float) -> void #foreign box2d;
EdgeShape_set :: (self: *b2EdgeShape, vx1: float32, vy1: float32, vx2: float32, vy2: float32) -> void #foreign box2d;
PolygonShape_new :: () -> *b2PolygonShape #foreign box2d;
PolygonShape_create :: () -> b2PolygonShape #foreign box2d;
PolygonShape_clone :: (self: *b2PolygonShape, allocator: *b2BlockAllocator) -> *b2Shape #foreign box2d;
PolygonShape_get_child_count :: (self: *b2PolygonShape) -> s32 #foreign box2d;
PolygonShape_set :: (self: *b2PolygonShape, points: *Vector2, count: s32) -> void #foreign box2d;
PolygonShape_set_as_box :: (self: *b2PolygonShape, hx: float, hy: float) -> void #foreign box2d;
PolygonShape_set_as_box_angled :: (self: *b2PolygonShape, hx: float, hy: float, center: *Vector2, angle: float) -> void #foreign box2d;
PolygonShape_test_point :: (self: *b2PolygonShape, transform: *b2Transform, p: *Vector2) -> bool #foreign box2d;
PolygonShape_compute_distance :: (self: *b2PolygonShape, xf: *b2Transform, p: *Vector2, distance: *float32, normal: *Vector2, childIndex: s32) -> void #foreign box2d;
PolygonShape_ray_cast :: (self: *b2PolygonShape, output: *b2RayCastOutput, input: *b2RayCastInput, transform: *b2Transform, childIndex: s32) -> bool #foreign box2d;
PolygonShape_compute_aabb :: (self: *b2PolygonShape, aabb: *b2AABB, transform: *b2Transform, childIndex: s32) -> void #foreign box2d;
PolygonShape_compute_mass :: (self: *b2PolygonShape, massData: *b2MassData, density: float) -> void #foreign box2d;
PolygonShape_validate :: (self: *b2PolygonShape) -> bool #foreign box2d;
PolygonShape_set_centroid :: (self: *b2PolygonShape, x: float32, y: float32) -> void #foreign box2d;
Shape_clone :: (shape: *b2Shape, allocator: *b2BlockAllocator) -> *b2Shape #foreign box2d;
Shape_get_type :: (shape: *b2Shape) -> b2ShapeType #foreign box2d;
Shape_get_child_count :: (shape: *b2Shape) -> s32 #foreign box2d;
Shape_test_point :: (shape: *b2Shape, xf: *b2Transform, p: *Vector2) -> bool #foreign box2d;
Shape_compute_distance :: (shape: *b2Shape, xf: *b2Transform, p: *Vector2, distance: *float32, normal: *Vector2, childIndex: s32) -> void #foreign box2d;
Shape_ray_cast :: (shape: *b2Shape, output: *b2RayCastOutput, input: *b2RayCastInput, transform: *b2Transform, childIndex: s32) -> bool #foreign box2d;
Shape_compute_aabb :: (shape: *b2Shape, aabb: *b2AABB, xf: *b2Transform, childIndex: s32) -> void #foreign box2d;
Shape_compute_mass :: (shape: *b2Shape, massData: *b2MassData, density: float) -> void #foreign box2d;
DistanceJointDef_new :: () -> *b2DistanceJointDef #foreign box2d;
DistanceJointDef_create :: () -> b2DistanceJointDef #foreign box2d;
DistanceJointDef_initialize :: (self: *b2DistanceJointDef, bodyA: *b2Body, bodyB: *b2Body, anchorA: *Vector2, anchorB: *Vector2) -> void #foreign box2d;
DistanceJoint_get_anchor_a :: (self: *b2DistanceJoint) -> Vector2 #foreign box2d;
DistanceJoint_get_anchor_b :: (self: *b2DistanceJoint) -> Vector2 #foreign box2d;
DistanceJoint_get_reaction_force :: (self: *b2DistanceJoint, inv_dt: float) -> Vector2 #foreign box2d;
DistanceJoint_get_reaction_torque :: (self: *b2DistanceJoint, inv_dt: float) -> float #foreign box2d;
DistanceJoint_get_local_anchor_a :: (self: *b2DistanceJoint) -> Vector2 #foreign box2d;
DistanceJoint_get_local_anchor_b :: (self: *b2DistanceJoint) -> Vector2 #foreign box2d;
DistanceJoint_get_length :: (self: *b2DistanceJoint) -> float #foreign box2d;
DistanceJoint_set_length :: (self: *b2DistanceJoint, length: float) -> float #foreign box2d;
DistanceJoint_get_min_length :: (self: *b2DistanceJoint) -> float #foreign box2d;
DistanceJoint_set_min_length :: (self: *b2DistanceJoint, minLength: float) -> float #foreign box2d;
DistanceJoint_get_max_length :: (self: *b2DistanceJoint) -> float #foreign box2d;
DistanceJoint_set_max_length :: (self: *b2DistanceJoint, maxLength: float) -> float #foreign box2d;
DistanceJoint_get_current_length :: (self: *b2DistanceJoint) -> float #foreign box2d;
DistanceJoint_set_stiffness :: (self: *b2DistanceJoint, stiffness: float) -> void #foreign box2d;
DistanceJoint_get_stiffness :: (self: *b2DistanceJoint) -> float #foreign box2d;
DistanceJoint_set_damping :: (self: *b2DistanceJoint, damping: float) -> void #foreign box2d;
DistanceJoint_get_damping :: (self: *b2DistanceJoint) -> float #foreign box2d;
DistanceJoint_dump :: (self: *b2DistanceJoint) -> void #foreign box2d;
DistanceJoint_draw :: (self: *b2DistanceJoint, draw: *b2Draw) -> void #foreign box2d;
FrictionJointDef_new :: () -> *b2FrictionJointDef #foreign box2d;
FrictionJointDef_create :: () -> b2FrictionJointDef #foreign box2d;
FrictionJointDef_initialize :: (self: *b2FrictionJointDef, bodyA: *b2Body, bodyB: *b2Body, anchor: *Vector2) -> void #foreign box2d;
FrictionJoint_get_anchor_a :: (self: *b2FrictionJoint) -> Vector2 #foreign box2d;
FrictionJoint_get_anchor_b :: (self: *b2FrictionJoint) -> Vector2 #foreign box2d;
FrictionJoint_get_reaction_force :: (self: *b2FrictionJoint, inv_dt: float) -> Vector2 #foreign box2d;
FrictionJoint_get_reaction_torque :: (self: *b2FrictionJoint, inv_dt: float) -> float #foreign box2d;
FrictionJoint_get_local_anchor_a :: (self: *b2FrictionJoint) -> Vector2 #foreign box2d;
FrictionJoint_get_local_anchor_b :: (self: *b2FrictionJoint) -> Vector2 #foreign box2d;
FrictionJoint_set_max_force :: (self: *b2FrictionJoint, force: float) -> void #foreign box2d;
FrictionJoint_get_max_force :: (self: *b2FrictionJoint) -> float #foreign box2d;
FrictionJoint_set_max_torque :: (self: *b2FrictionJoint, torque: float) -> void #foreign box2d;
FrictionJoint_get_max_torque :: (self: *b2FrictionJoint) -> float #foreign box2d;
FrictionJoint_dump :: (self: *b2FrictionJoint) -> void #foreign box2d;
GearJointDef_new :: () -> *b2GearJointDef #foreign box2d;
GearJointDef_create :: () -> b2GearJointDef #foreign box2d;
GearJoint_get_anchor_a :: (self: *b2GearJoint) -> Vector2 #foreign box2d;
GearJoint_get_anchor_b :: (self: *b2GearJoint) -> Vector2 #foreign box2d;
GearJoint_get_reaction_force :: (self: *b2GearJoint, inv_dt: float) -> Vector2 #foreign box2d;
GearJoint_get_reaction_torque :: (self: *b2GearJoint, inv_dt: float) -> float #foreign box2d;
GearJoint_get_joint1 :: (self: *b2GearJoint) -> *b2Joint #foreign box2d;
GearJoint_get_joint2 :: (self: *b2GearJoint) -> *b2Joint #foreign box2d;
GearJoint_set_ratio :: (self: *b2GearJoint, ratio: float) -> void #foreign box2d;
GearJoint_get_ratio :: (self: *b2GearJoint) -> float #foreign box2d;
GearJoint_dump :: (self: *b2GearJoint) -> void #foreign box2d;
JointDef_new :: () -> *b2JointDef #foreign box2d;
JointDef_create :: () -> b2JointDef #foreign box2d;
linear_stiffness :: (stiffness: *float, damping: *float, frequencyHertz: float, dampingRatio: float, bodyA: *b2Body, bodyB: *b2Body) -> void #foreign box2d;
angular_stiffness :: (stiffness: *float, damping: *float, frequencyHertz: float, dampingRatio: float, bodyA: *b2Body, bodyB: *b2Body) -> void #foreign box2d;
Joint_get_type :: (self: *b2Joint) -> b2JointType #foreign box2d;
Joint_get_body_a :: (self: *b2Joint) -> *b2Body #foreign box2d;
Joint_get_body_b :: (self: *b2Joint) -> *b2Body #foreign box2d;
Joint_get_anchor_a :: (self: *b2Joint) -> Vector2 #foreign box2d;
Joint_get_anchor_b :: (self: *b2Joint) -> Vector2 #foreign box2d;
Joint_get_reaction_force :: (self: *b2Joint, inv_dt: float) -> Vector2 #foreign box2d;
Joint_get_reaction_torque :: (self: *b2Joint, inv_dt: float) -> float #foreign box2d;
Joint_get_next :: (self: *b2Joint) -> *b2Joint #foreign box2d;
Joint_get_user_data :: (self: *b2Joint) -> *void #foreign box2d;
Joint_set_user_data :: (self: *b2Joint, data: *void) -> void #foreign box2d;
Joint_is_enabled :: (self: *b2Joint) -> bool #foreign box2d;
Joint_get_collide_connected :: (self: *b2Joint) -> bool #foreign box2d;
Joint_dump :: (self: *b2Joint) -> void #foreign box2d;
Joint_shift_origin :: (self: *b2Joint, newOrigin: *Vector2) -> void #foreign box2d;
Joint_draw :: (self: *b2Joint, draw: *b2Draw) -> void #foreign box2d;
MotorJointDef_new :: () -> *b2MotorJointDef #foreign box2d;
MotorJointDef_create :: () -> b2MotorJointDef #foreign box2d;
MotorJointDef_initialize :: (self: *b2MotorJointDef, bodyA: *b2Body, bodyB: *b2Body) -> void #foreign box2d;
MotorJoint_get_anchor_a :: (self: *b2MotorJoint) -> Vector2 #foreign box2d;
MotorJoint_get_anchor_b :: (self: *b2MotorJoint) -> Vector2 #foreign box2d;
MotorJoint_get_reaction_force :: (self: *b2MotorJoint, inv_dt: float) -> Vector2 #foreign box2d;
MotorJoint_get_reaction_torque :: (self: *b2MotorJoint, inv_dt: float) -> float #foreign box2d;
MotorJoint_set_linear_offset :: (self: *b2MotorJoint, linearOffset: *Vector2) -> void #foreign box2d;
MotorJoint_get_linear_offset :: (self: *b2MotorJoint) -> Vector2 #foreign box2d;
MotorJoint_set_angular_offset :: (self: *b2MotorJoint, angularOffset: float) -> void #foreign box2d;
MotorJoint_get_angular_offset :: (self: *b2MotorJoint) -> float #foreign box2d;
MotorJoint_set_max_force :: (self: *b2MotorJoint, force: float) -> void #foreign box2d;
MotorJoint_get_max_force :: (self: *b2MotorJoint) -> float #foreign box2d;
MotorJoint_set_max_torque :: (self: *b2MotorJoint, torque: float) -> void #foreign box2d;
MotorJoint_get_max_torque :: (self: *b2MotorJoint) -> float #foreign box2d;
MotorJoint_set_correction_factor :: (self: *b2MotorJoint, factor: float) -> void #foreign box2d;
MotorJoint_get_correction_factor :: (self: *b2MotorJoint) -> float #foreign box2d;
MotorJoint_dump :: (self: *b2MotorJoint) -> void #foreign box2d;
MouseJointDef_new :: () -> *b2MouseJointDef #foreign box2d;
MouseJointDef_create :: () -> b2MouseJointDef #foreign box2d;
MouseJoint_get_anchor_a :: (self: *b2MouseJoint) -> Vector2 #foreign box2d;
MouseJoint_get_anchor_b :: (self: *b2MouseJoint) -> Vector2 #foreign box2d;
MouseJoint_get_reaction_force :: (self: *b2MouseJoint, inv_dt: float) -> Vector2 #foreign box2d;
MouseJoint_get_reaction_torque :: (self: *b2MouseJoint, inv_dt: float) -> float #foreign box2d;
MouseJoint_set_target :: (self: *b2MouseJoint, target: *Vector2) -> void #foreign box2d;
MouseJoint_get_target :: (self: *b2MouseJoint) -> Vector2 #foreign box2d;
MouseJoint_set_max_force :: (self: *b2MouseJoint, force: float) -> void #foreign box2d;
MouseJoint_get_max_force :: (self: *b2MouseJoint) -> float #foreign box2d;
MouseJoint_set_stiffness :: (self: *b2MouseJoint, stiffness: float) -> void #foreign box2d;
MouseJoint_get_stiffness :: (self: *b2MouseJoint) -> float #foreign box2d;
MouseJoint_set_damping :: (self: *b2MouseJoint, damping: float) -> void #foreign box2d;
MouseJoint_get_damping :: (self: *b2MouseJoint) -> float #foreign box2d;
MouseJoint_dump :: (self: *b2MouseJoint) -> void #foreign box2d;
MouseJoint_shift_origin :: (self: *b2MouseJoint, newOrigin: *Vector2) -> void #foreign box2d;
PrismaticJointDef_new :: () -> *b2PrismaticJointDef #foreign box2d;
PrismaticJointDef_create :: () -> b2PrismaticJointDef #foreign box2d;
PrismaticJointDef_initialize :: (self: *b2PrismaticJointDef, bodyA: *b2Body, bodyB: *b2Body, anchor: *Vector2, axis: *Vector2) -> void #foreign box2d;
PrismaticJoint_get_anchor_a :: (self: *b2PrismaticJoint) -> Vector2 #foreign box2d;
PrismaticJoint_get_anchor_b :: (self: *b2PrismaticJoint) -> Vector2 #foreign box2d;
PrismaticJoint_get_reaction_force :: (self: *b2PrismaticJoint, inv_dt: float) -> Vector2 #foreign box2d;
PrismaticJoint_get_reaction_torque :: (self: *b2PrismaticJoint, inv_dt: float) -> float #foreign box2d;
PrismaticJoint_get_local_anchor_a :: (self: *b2PrismaticJoint) -> Vector2 #foreign box2d;
PrismaticJoint_get_local_anchor_b :: (self: *b2PrismaticJoint) -> Vector2 #foreign box2d;
PrismaticJoint_get_local_axis_a :: (self: *b2PrismaticJoint) -> Vector2 #foreign box2d;
PrismaticJoint_get_reference_angle :: (self: *b2PrismaticJoint) -> float #foreign box2d;
PrismaticJoint_get_joint_translation :: (self: *b2PrismaticJoint) -> float #foreign box2d;
PrismaticJoint_get_joint_speed :: (self: *b2PrismaticJoint) -> float #foreign box2d;
PrismaticJoint_is_limit_enabled :: (self: *b2PrismaticJoint) -> bool #foreign box2d;
PrismaticJoint_enable_limit :: (self: *b2PrismaticJoint, flag: bool) -> void #foreign box2d;
PrismaticJoint_get_lower_limit :: (self: *b2PrismaticJoint) -> float #foreign box2d;
PrismaticJoint_get_upper_limit :: (self: *b2PrismaticJoint) -> float #foreign box2d;
PrismaticJoint_set_limits :: (self: *b2PrismaticJoint, lower: float, upper: float) -> void #foreign box2d;
PrismaticJoint_is_motor_enabled :: (self: *b2PrismaticJoint) -> bool #foreign box2d;
PrismaticJoint_enable_motor :: (self: *b2PrismaticJoint, flag: bool) -> void #foreign box2d;
PrismaticJoint_set_motor_speed :: (self: *b2PrismaticJoint, speed: float) -> void #foreign box2d;
PrismaticJoint_get_motor_speed :: (self: *b2PrismaticJoint) -> float #foreign box2d;
PrismaticJoint_set_max_motor_force :: (self: *b2PrismaticJoint, force: float) -> void #foreign box2d;
PrismaticJoint_get_max_motor_force :: (self: *b2PrismaticJoint) -> float #foreign box2d;
PrismaticJoint_get_motor_force :: (self: *b2PrismaticJoint, inv_dt: float) -> float #foreign box2d;
PrismaticJoint_dump :: (self: *b2PrismaticJoint) -> void #foreign box2d;
PrismaticJoint_draw :: (self: *b2PrismaticJoint, draw: *b2Draw) -> void #foreign box2d;
PulleyJointDef_new :: () -> *b2PulleyJointDef #foreign box2d;
PulleyJointDef_create :: () -> b2PulleyJointDef #foreign box2d;
PulleyJointDef_initialize :: (self: *b2PulleyJointDef, bodyA: *b2Body, bodyB: *b2Body, groundAnchorA: *Vector2, groundAnchorB: *Vector2, anchorA: *Vector2, anchorB: *Vector2, ratio: float) -> void #foreign box2d;
PulleyJoint_get_anchor_a :: (self: *b2PulleyJoint) -> Vector2 #foreign box2d;
PulleyJoint_get_anchor_b :: (self: *b2PulleyJoint) -> Vector2 #foreign box2d;
PulleyJoint_get_reaction_force :: (self: *b2PulleyJoint, inv_dt: float) -> Vector2 #foreign box2d;
PulleyJoint_get_reaction_torque :: (self: *b2PulleyJoint, inv_dt: float) -> float #foreign box2d;
PulleyJoint_get_ground_anchor_a :: (self: *b2PulleyJoint) -> Vector2 #foreign box2d;
PulleyJoint_get_ground_anchor_b :: (self: *b2PulleyJoint) -> Vector2 #foreign box2d;
PulleyJoint_get_length_a :: (self: *b2PulleyJoint) -> float #foreign box2d;
PulleyJoint_get_length_b :: (self: *b2PulleyJoint) -> float #foreign box2d;
PulleyJoint_get_ratio :: (self: *b2PulleyJoint) -> float #foreign box2d;
PulleyJoint_get_current_length_a :: (self: *b2PulleyJoint) -> float #foreign box2d;
PulleyJoint_get_current_length_b :: (self: *b2PulleyJoint) -> float #foreign box2d;
PulleyJoint_dump :: (self: *b2PulleyJoint) -> void #foreign box2d;
PulleyJoint_shift_origin :: (self: *b2PulleyJoint, newOrigin: *Vector2) -> void #foreign box2d;
RevoluteJointDef_new :: () -> *b2RevoluteJointDef #foreign box2d;
RevoluteJointDef_create :: () -> b2RevoluteJointDef #foreign box2d;
RevoluteJointDef_initialize :: (self: *b2RevoluteJointDef, bodyA: *b2Body, bodyB: *b2Body, anchor: *Vector2) -> void #foreign box2d;
RevoluteJoint_get_anchor_a :: (self: *b2RevoluteJoint) -> Vector2 #foreign box2d;
RevoluteJoint_get_anchor_b :: (self: *b2RevoluteJoint) -> Vector2 #foreign box2d;
RevoluteJoint_get_local_anchor_a :: (self: *b2RevoluteJoint) -> Vector2 #foreign box2d;
RevoluteJoint_get_local_anchor_b :: (self: *b2RevoluteJoint) -> Vector2 #foreign box2d;
RevoluteJoint_get_reference_angle :: (self: *b2RevoluteJoint) -> float #foreign box2d;
RevoluteJoint_get_joint_angle :: (self: *b2RevoluteJoint) -> float #foreign box2d;
RevoluteJoint_get_joint_speed :: (self: *b2RevoluteJoint) -> float #foreign box2d;
RevoluteJoint_is_limit_enabled :: (self: *b2RevoluteJoint) -> bool #foreign box2d;
RevoluteJoint_enable_limit :: (self: *b2RevoluteJoint, flag: bool) -> void #foreign box2d;
RevoluteJoint_get_lower_limit :: (self: *b2RevoluteJoint) -> float #foreign box2d;
RevoluteJoint_get_upper_limit :: (self: *b2RevoluteJoint) -> float #foreign box2d;
RevoluteJoint_set_limits :: (self: *b2RevoluteJoint, lower: float, upper: float) -> void #foreign box2d;
RevoluteJoint_is_motor_enabled :: (self: *b2RevoluteJoint) -> bool #foreign box2d;
RevoluteJoint_enable_motor :: (self: *b2RevoluteJoint, flag: bool) -> void #foreign box2d;
RevoluteJoint_set_motor_speed :: (self: *b2RevoluteJoint, speed: float) -> void #foreign box2d;
RevoluteJoint_get_motor_speed :: (self: *b2RevoluteJoint) -> float #foreign box2d;
RevoluteJoint_set_max_motor_torque :: (self: *b2RevoluteJoint, torque: float) -> void #foreign box2d;
RevoluteJoint_get_max_motor_torque :: (self: *b2RevoluteJoint) -> float #foreign box2d;
RevoluteJoint_get_reaction_force :: (self: *b2RevoluteJoint, inv_dt: float) -> Vector2 #foreign box2d;
RevoluteJoint_get_reaction_torque :: (self: *b2RevoluteJoint, inv_dt: float) -> float #foreign box2d;
RevoluteJoint_get_motor_torque :: (self: *b2RevoluteJoint, inv_dt: float) -> float #foreign box2d;
RevoluteJoint_dump :: (self: *b2RevoluteJoint) -> void #foreign box2d;
RevoluteJoint_draw :: (self: *b2RevoluteJoint, draw: *b2Draw) -> void #foreign box2d;
RopeTuning_new :: () -> *b2RopeTuning #foreign box2d;
RopeTurning_create :: () -> b2RopeTuning #foreign box2d;
RopeDef_new :: () -> *b2RopeDef #foreign box2d;
RopeDef_create :: () -> b2RopeDef #foreign box2d;
Rope_new :: () -> *b2Rope #foreign box2d;
Rope_create :: () -> b2Rope #foreign box2d;
Rope_initialize :: (self: *b2Rope, def: *b2RopeDef) -> void #foreign box2d;
Rope_set_tuning :: (self: *b2Rope, tuning: *b2RopeTuning) -> void #foreign box2d;
Rope_step :: (self: *b2Rope, timeStep: float, iterations: s32, position: *Vector2) -> void #foreign box2d;
Rope_reset :: (self: *b2Rope, position: *Vector2) -> void #foreign box2d;
Rope_draw :: (self: *b2Rope, draw: *b2Draw) -> void #foreign box2d;
WeldJointDef_new :: () -> *b2WeldJointDef #foreign box2d;
WeldJointDef_create :: () -> b2WeldJointDef #foreign box2d;
WeldJointDef_initialize :: (self: *b2WeldJointDef, bodyA: *b2Body, bodyB: *b2Body, anchor: *Vector2) -> void #foreign box2d;
WeldJoint_get_anchor_a :: (self: *b2WeldJoint) -> Vector2 #foreign box2d;
WeldJoint_get_anchor_b :: (self: *b2WeldJoint) -> Vector2 #foreign box2d;
WeldJoint_get_reaction_force :: (self: *b2WeldJoint, inv_dt: float) -> Vector2 #foreign box2d;
WeldJoint_get_reaction_torque :: (self: *b2WeldJoint, inv_dt: float) -> float #foreign box2d;
WeldJoint_get_local_anchor_a :: (self: *b2WeldJoint) -> Vector2 #foreign box2d;
WeldJoint_get_local_anchor_b :: (self: *b2WeldJoint) -> Vector2 #foreign box2d;
WeldJoint_get_reference_angle :: (self: *b2WeldJoint) -> float #foreign box2d;
WeldJoint_set_stiffness :: (self: *b2WeldJoint, stiffness: float) -> void #foreign box2d;
WeldJoint_get_stiffness :: (self: *b2WeldJoint) -> float #foreign box2d;
WeldJoint_set_damping :: (self: *b2WeldJoint, damping: float) -> void #foreign box2d;
WeldJoint_get_damping :: (self: *b2WeldJoint) -> float #foreign box2d;
WeldJoint_dump :: (self: *b2WeldJoint) -> void #foreign box2d;
WheelJointDef_new :: () -> *b2WheelJointDef #foreign box2d;
WheelJointDef_create :: () -> b2WheelJointDef #foreign box2d;
WheelJointDef_initialize :: (self: *b2WheelJointDef, bodyA: *b2Body, bodyB: *b2Body, anchor: *Vector2, axis: *Vector2) -> void #foreign box2d;
WheelJoint_get_anchor_a :: (self: *b2WheelJoint) -> Vector2 #foreign box2d;
WheelJoint_get_anchor_b :: (self: *b2WheelJoint) -> Vector2 #foreign box2d;
WheelJoint_get_reaction_force :: (self: *b2WheelJoint, inv_dt: float) -> Vector2 #foreign box2d;
WheelJoint_get_reaction_torque :: (self: *b2WheelJoint, inv_dt: float) -> float #foreign box2d;
WheelJoint_get_local_anchor_a :: (self: *b2WheelJoint) -> Vector2 #foreign box2d;
WheelJoint_get_local_anchor_b :: (self: *b2WheelJoint) -> Vector2 #foreign box2d;
WheelJoint_get_local_axis_a :: (self: *b2WheelJoint) -> Vector2 #foreign box2d;
WheelJoint_get_joint_translation :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_get_joint_linear_speed :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_get_joint_angle :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_get_joint_angular_speed :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_is_limit_enabled :: (self: *b2WheelJoint) -> bool #foreign box2d;
WheelJoint_enable_limit :: (self: *b2WheelJoint, flag: bool) -> void #foreign box2d;
WheelJoint_get_lower_limit :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_get_upper_limit :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_set_limits :: (self: *b2WheelJoint, lower: float, upper: float) -> void #foreign box2d;
WheelJoint_is_motor_enabled :: (self: *b2WheelJoint) -> bool #foreign box2d;
WheelJoint_enable_motor :: (self: *b2WheelJoint, flag: bool) -> void #foreign box2d;
WheelJoint_set_motor_speed :: (self: *b2WheelJoint, speed: float) -> void #foreign box2d;
WheelJoint_get_motor_speed :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_set_max_motor_torque :: (self: *b2WheelJoint, torque: float) -> void #foreign box2d;
WheelJoint_get_max_motor_torque :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_get_motor_torque :: (self: *b2WheelJoint, inv_dt: float) -> float #foreign box2d;
WheelJoint_set_stiffness :: (self: *b2WheelJoint, stiffness: float) -> void #foreign box2d;
WheelJoint_get_stiffness :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_set_damping :: (self: *b2WheelJoint, damping: float) -> void #foreign box2d;
WheelJoint_get_damping :: (self: *b2WheelJoint) -> float #foreign box2d;
WheelJoint_dump :: (self: *b2WheelJoint) -> void #foreign box2d;
WheelJoint_draw :: (self: *b2WheelJoint, draw: *b2Draw) -> void #foreign box2d;

#scope_file

box2d :: #foreign_library "bin/win/box2djai";
