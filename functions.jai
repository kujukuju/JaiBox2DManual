WorldManifold_Initialize :: (self: *b2WorldManifold, manifold: *b2Manifold, xf_a: *b2Transform, radius_a: float, xf_b: *b2Transform, radius_b: float) -> void #foreign box2d;
get_point_states :: (s1: *b2PointState, s2: *b2PointState, m1: *b2Manifold, m2: *b2Manifold) -> void #foreign box2d;
test_overlap :: (shape_a: *b2Shape, index_a: s32, shape_b: *b2Shape, index_b: s32, xf_a: *b2Transform, xf_b: *b2Transform) -> bool #must #foreign box2d;
DistanceProxy_set :: (self: *b2DistanceProxy, shape: *b2Shape, index: s32) -> void #foreign box2d;
distance :: (output: *b2DistanceOutput, cache: *b2SimplexCache, input: *b2DistanceInput) -> void #foreign box2d;
time_of_impact :: (output: *b2TOIOutput, input: *b2TOIInput) -> void #foreign box2d;
Contact_get_manifold :: (self: *b2Contact) -> *b2Manifold #must #foreign box2d;
Contact_get_world_manifold :: (self: *b2Contact, world_manifold: *b2WorldManifold) -> void #foreign box2d;
Contact_is_touching :: (self: *b2Contact) -> bool #must #foreign box2d;
Contact_is_enabled :: (self: *b2Contact) -> bool #must #foreign box2d;
Contact_get_next :: (self: *b2Contact) -> *b2Contact #must #foreign box2d;
Contact_get_fixture_a :: (self: *b2Contact) -> *b2Fixture #must #foreign box2d;
Contact_get_child_index_a :: (self: *b2Contact) -> s32 #must #foreign box2d;
Contact_get_fixture_b :: (self: *b2Contact) -> *b2Fixture #must #foreign box2d;
Contact_get_child_index_b :: (self: *b2Contact) -> s32 #must #foreign box2d;
Contact_set_friction :: (self: *b2Contact, friction: float) -> void #foreign box2d;
Contact_get_friction :: (self: *b2Contact) -> float #must #foreign box2d;
Contact_reset_friction :: (self: *b2Contact) -> void #foreign box2d;
Contact_set_restitution :: (self: *b2Contact, restitution: float) -> void #foreign box2d;
Contact_get_restitution :: (self: *b2Contact) -> float #must #foreign box2d;
Contact_reset_restitution :: (self: *b2Contact) -> void #foreign box2d;
Contact_set_tangent_speed :: (self: *b2Contact, speed: float) -> void #foreign box2d;
Contact_get_tangent_speed :: (self: *b2Contact) -> float #must #foreign box2d;
Contact_evaluate_virtual :: (self: *b2Contact, manifold: *b2Manifold, xf_a: *b2Transform, xf_b: *b2Transform) -> void #foreign box2d;
Body_apply_linear_impulse :: (self: *b2Body, impulse: *Vector2, point: *Vector2, wake: bool) -> void #foreign box2d;
Body_apply_angular_impulse :: (self: *b2Body, impulse: float, wake: bool) -> void #foreign box2d;
Body_get_mass :: (self: *b2Body) -> float #must #foreign box2d;
Body_get_inertia :: (self: *b2Body) -> float #must #foreign box2d;
Body_get_mass_data :: (self: *b2Body, data: *b2MassData) -> void #foreign box2d;
Body_set_mass_data :: (self: *b2Body, data: *b2MassData) -> void #foreign box2d;
Body_reset_mass_data :: (self: *b2Body) -> void #foreign box2d;
Body_get_world_point :: (self: *b2Body, local: *Vector2) -> Vector2 #must #foreign box2d;
Body_get_world_vector :: (self: *b2Body, local: *Vector2) -> Vector2 #must #foreign box2d;
Body_get_local_point :: (self: *b2Body, world: *Vector2) -> Vector2 #must #foreign box2d;
Body_get_local_vector :: (self: *b2Body, world: *Vector2) -> Vector2 #must #foreign box2d;
Body_get_linear_velocity_from_world_point :: (self: *b2Body, point: *Vector2) -> Vector2 #must #foreign box2d;
Body_get_linear_velocity_from_local_point :: (self: *b2Body, point: *Vector2) -> Vector2 #must #foreign box2d;
Body_get_linear_damping :: (self: *b2Body) -> float #must #foreign box2d;
Body_set_linear_damping :: (self: *b2Body, damping: float) -> void #foreign box2d;
Body_get_angular_damping :: (self: *b2Body) -> float #must #foreign box2d;
Body_set_angular_damping :: (self: *b2Body, damping: float) -> void #foreign box2d;
Body_get_gravity_scale :: (self: *b2Body) -> float #must #foreign box2d;
Body_set_gravity_scale :: (self: *b2Body, scale: float) -> void #foreign box2d;
Body_set_type :: (self: *b2Body, type: s32) -> void #foreign box2d;
Body_get_type :: (self: *b2Body) -> s32 #must #foreign box2d;
Body_set_bullet :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_bullet :: (self: *b2Body) -> bool #must #foreign box2d;
Body_set_sleeping_allowed :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_sleeping_allowed :: (*self: b2Body) -> bool #must #foreign box2d;
Body_set_awake :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_awake :: (self: *b2Body) -> bool #must #foreign box2d;
Body_set_active :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_active :: (self: *b2Body) -> bool #must #foreign box2d;
Body_set_fixed_rotation :: (self: *b2Body, flag: bool) -> void #foreign box2d;
Body_is_fixed_rotation :: (self: *b2Body) -> bool #must #foreign box2d;
Body_get_fixture_list :: (self: *b2Body) -> *b2Fixture #must #foreign box2d;
Body_get_joint_list :: (self: *b2Body) -> *b2JointEdge #must #foreign box2d;
Body_get_contact_list :: (self: *b2Body) -> *b2ContactEdge #must #foreign box2d;
Body_get_next :: (self: *b2Body) -> *b2Body #must #foreign box2d;
Body_get_user_data :: (self: *b2Body) -> *void #must #foreign box2d;
Body_set_user_data :: (self: *b2Body, data: *void) -> void #foreign box2d;
Body_get_world :: (self: *b2Body) -> *b2World #must #foreign box2d;
Body_dump :: (self: *b2Body) -> void #foreign box2d;
Fixture_get_type :: (self: *b2Fixture) -> s32 #must #foreign box2d;
Fixture_get_shape :: (self: *b2Fixture) -> *b2Shape #must #foreign box2d;
Fixture_set_sensor :: (self: *b2Fixture, flag: bool) -> void #foreign box2d;
Fixture_is_sensor :: (self: *b2Fixture) -> bool #must #foreign box2d;
Fixture_set_filter_data :: (self: *b2Fixture, filter: *b2Filter) -> void #foreign box2d;
Fixture_get_filter_data :: (self: *b2Fixture) -> *b2Filter #must #foreign box2d;
Fixture_refilter :: (self: *b2Fixture) -> void #foreign box2d;
Fixture_get_body :: (self: *b2Fixture) -> *b2Body #must #foreign box2d;
Fixture_get_next :: (self: *b2Fixture) -> *b2Fixture #must #foreign box2d;
Fixture_get_user_data :: (self: *b2Fixture) -> *void #must #foreign box2d;
Fixture_set_user_data :: (self: *b2Fixture, data: *void) -> void #foreign box2d;
Fixture_test_point :: (self: *b2Fixture, p: *Vector2) -> bool #must #foreign box2d;
Fixture_ray_cast :: (self: *b2Fixture, output: *b2RayCastOutput, input: *b2RayCastInput, child_id: s32) -> bool #must #foreign box2d;
Fixture_get_mass_data :: (self: *b2Fixture, data: *b2MassData) -> void #foreign box2d;
Fixture_set_density :: (self: *b2Fixture, density: float) -> void #foreign box2d;
Fixture_get_density :: (self: *b2Fixture) -> float #must #foreign box2d;
Fixture_get_friction :: (self: *b2Fixture) -> float #must #foreign box2d;
Fixture_set_friction :: (self: *b2Fixture, friction: float) -> void #foreign box2d;
Fixture_get_restitution :: (self: *b2Fixture) -> float #must #foreign box2d;
Fixture_set_restitution :: (self: *b2Fixture, restitution: float) -> void #foreign box2d;
Fixture_get_aabb :: (self: *b2Fixture, child_id: s32) -> *b2AABB #must #foreign box2d;
Fixture_dump :: (self: *b2Fixture, body_id: s32) -> void #foreign box2d;
World_new :: (gravity: *Vector2) -> *b2World #must #foreign box2d;
World_drop :: (self: *b2World) -> void #foreign box2d;
World_set_destruction_listener :: (self: *b2World, listener: *b2DestructionListener) -> void #foreign box2d;
World_set_contact_filter :: (self: *b2World, filter: *b2ContactFilter) -> void #foreign box2d;
World_set_contact_listener :: (self: *b2World, listener: *b2ContactListener) -> void #foreign box2d;
World_set_debug_draw :: (self: *b2World, draw: *b2Draw) -> void #foreign box2d;
World_create_body :: (self: *b2World, def: *b2BodyDef) -> *b2Body #must #foreign box2d;
World_destroy_body :: (self: *b2World, body: *b2Body) -> void #foreign box2d;
World_create_joint :: (self: *b2World, def: *b2JointDef) -> *b2Joint #must #foreign box2d;
World_destroy_joint :: (self: *b2World, joint: *b2Joint) -> void #foreign box2d;
World_step :: (self: *b2World, time_step: float, velocity_iterations: s32, position_iterations: s32) -> void #foreign box2d;
World_clear_forces :: (self: *b2World) -> void #foreign box2d;
World_draw_debug_data :: (self: *b2World) -> void #foreign box2d;
World_query_aabb :: (self: *b2World, callback: *b2QueryCallback, aabb: *b2AABB) -> void #foreign box2d;
World_ray_cast :: (self: *b2World, callback: *b2RayCastCallback, p1: *Vector2, p2: *Vector2) -> void #foreign box2d;
World_get_body_list :: (self: *b2World) -> *b2Body #must #foreign box2d;
World_get_joint_list :: (self: *b2World) -> *b2Joint #must #foreign box2d;
World_get_contact_list :: (self: *b2World) -> *b2Contact #must #foreign box2d;
World_set_allow_sleeping :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_allow_sleeping :: (self: *b2World) -> bool #must #foreign box2d;
World_set_warm_starting :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_warm_starting :: (self: *b2World) -> bool #must #foreign box2d;
World_set_continuous_physics :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_continuous_physics :: (self: *b2World) -> bool #must #foreign box2d;
World_set_sub_stepping :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_sub_stepping :: (self: *b2World) -> bool #must #foreign box2d;
World_get_proxy_count :: (self: *b2World) -> s32 #must #foreign box2d;
World_get_body_count :: (self: *b2World) -> s32 #must #foreign box2d;
World_get_joint_count :: (self: *b2World) -> s32 #must #foreign box2d;
World_get_contact_count :: (self: *b2World) -> s32 #must #foreign box2d;
World_get_tree_height :: (self: *b2World) -> s32 #must #foreign box2d;
World_get_tree_balance :: (self: *b2World) -> s32 #must #foreign box2d;
World_get_tree_quality :: (self: *b2World) -> float #must #foreign box2d;
World_set_gravity :: (self: *b2World, gravity: *Vector2) -> void #foreign box2d;
World_get_gravity :: (self: *b2World) -> Vector2 #must #foreign box2d;
World_is_locked :: (self: *b2World) -> bool #must #foreign box2d;
World_set_auto_clear_forces :: (self: *b2World, flag: bool) -> void #foreign box2d;
World_get_auto_clear_forces :: (self: *b2World) -> bool #must #foreign box2d;
World_shift_origin :: (self: *b2World, origin: *Vector2) -> void #foreign box2d;
World_get_contact_manager :: (self: *b2World) -> *b2ContactManager #must #foreign box2d;
World_get_profile :: (self: *b2World) -> *b2Profile #must #foreign box2d;
World_dump :: (self: *b2World) -> void #foreign box2d;
DestructionListenerLink_alloc :: () -> *DestructionListenerLink #must #foreign box2d;
DestructionListenerLink_bind :: (self: *DestructionListenerLink, o: RustObject, sgtj: SayGoodbyeToJointCB, sgtf: SayGoodbyeToFixtureCB) -> void #foreign box2d;
DestructionListenerLink_as_base :: (self: *DestructionListenerLink) -> *b2DestructionListener #must #foreign box2d;
DestructionListenerLink_drop :: (self: *DestructionListenerLink) -> void #foreign box2d;
ContactFilterLink_alloc :: () -> *ContactFilterLink #must #foreign box2d;
ContactFilterLink_bind :: (self: *ContactFilterLink, o: RustObject, sc: ShouldCollideCB) -> void #foreign box2d;
ContactFilterLink_as_base :: (self: *ContactFilterLink) -> *b2ContactFilter #must #foreign box2d;
ContactFilterLink_drop :: (self: *ContactFilterLink) -> void #foreign box2d;
ContactListenerLink_alloc :: () -> *ContactListenerLink #must #foreign box2d;
ContactListenerLink_bind :: (self: *ContactListenerLink, o: RustObject, bc: BeginContactCB, ec: EndContactCB, pres: PreSolveCB, posts: PostSolveCB) -> void #foreign box2d;
ContactListenerLink_as_base :: (self: *ContactListenerLink) -> *b2ContactListener #must #foreign box2d;
ContactListenerLink_drop :: (self: *ContactListenerLink) -> void #foreign box2d;
QueryCallbackLink_alloc :: () -> *QueryCallbackLink #must #foreign box2d;
QueryCallbackLink_bind :: (self: *QueryCallbackLink, object: RustObject, rf: QCReportFixtureCB) -> void #foreign box2d;
QueryCallbackLink_as_base :: (self: *QueryCallbackLink) -> *b2QueryCallback #must #foreign box2d;
QueryCallbackLink_drop :: (self: *QueryCallbackLink) -> void #foreign box2d;
RayCastCallbackLink_alloc :: () -> *RayCastCallbackLink #must #foreign box2d;
RayCastCallbackLink_bind :: (self: *RayCastCallbackLink, object: RustObject, rf: RCCReportFixtureCB) -> void #foreign box2d;
RayCastCallbackLink_as_base :: (self: *RayCastCallbackLink) -> *b2RayCastCallback #must #foreign box2d;
RayCastCallbackLink_drop :: (self: *RayCastCallbackLink) -> void #foreign box2d;
ChainShape_new :: () -> *b2ChainShape #must #foreign box2d;
ChainShape_drop :: (self: *b2ChainShape) -> void #foreign box2d;
ChainShape_as_shape :: (self: *b2ChainShape) -> *b2Shape #must #foreign box2d;
Shape_as_chain_shape :: (self: *b2Shape) -> *b2ChainShape #must #foreign box2d;
ChainShape_clear :: (self: *b2ChainShape) -> void #foreign box2d;
ChainShape_create_loop :: (self: *b2ChainShape, vertices: *Vector2, count: s32) -> void #foreign box2d;
ChainShape_create_chain :: (self: *b2ChainShape, vertices: *Vector2, count: s32) -> void #foreign box2d;
ChainShape_get_vertex_count :: (self: *b2ChainShape) -> s32 #must #foreign box2d;
ChainShape_get_prev_vertex :: (self: *b2ChainShape, prev: *Vector2) -> bool #must #foreign box2d;
ChainShape_set_prev_vertex :: (self: *b2ChainShape, prev: *Vector2) -> void #foreign box2d;
ChainShape_get_next_vertex :: (self: *b2ChainShape, next: *Vector2) -> bool #must #foreign box2d;
ChainShape_set_next_vertex :: (self: *b2ChainShape, next: *Vector2) -> void #foreign box2d;
ChainShape_get_child_edge :: (self: *b2ChainShape, edge: *b2EdgeShape, index: s32) -> void #foreign box2d;
CircleShape_new :: () -> *b2CircleShape #must #foreign box2d;
CircleShape_drop :: (self: *b2CircleShape) -> void #foreign box2d;
CircleShape_as_shape :: (self: *b2CircleShape) -> *b2Shape #must #foreign box2d;
Shape_as_circle_shape :: (self: *b2Shape) -> *b2CircleShape #must #foreign box2d;
CircleShape_get_support :: (self: *b2CircleShape, d: *Vector2) -> s32 #must #foreign box2d;
CircleShape_get_support_vertex :: (self: *b2CircleShape, d: *Vector2) -> *Vector2 #must #foreign box2d;
CircleShape_get_vertex_count :: (self: *b2CircleShape) -> s32 #must #foreign box2d;
CircleShape_get_vertex :: (self: *b2CircleShape, index: s32) -> *Vector2 #must #foreign box2d;
CircleShape_get_pos :: (self: *b2CircleShape) -> Vector2 #must #foreign box2d;
CircleShape_set_pos :: (self: *b2CircleShape, pos: Vector2) -> void #foreign box2d;
EdgeShape_new :: () -> *b2EdgeShape #must #foreign box2d;
EdgeShape_drop :: (self: *b2EdgeShape) -> void #foreign box2d;
EdgeShape_as_shape :: (self: *b2EdgeShape) -> *b2Shape #must #foreign box2d;
Shape_as_edge_shape :: (self: *b2Shape) -> *b2EdgeShape #must #foreign box2d;
EdgeShape_set :: (self: *b2EdgeShape, v1: *Vector2, v2: *Vector2) -> void #foreign box2d;
EdgeShape_get_v1 :: (self: *b2EdgeShape) -> Vector2 #must #foreign box2d;
EdgeShape_set_v1 :: (self: *b2EdgeShape, v1: Vector2) -> void #foreign box2d;
EdgeShape_get_v2 :: (self: *b2EdgeShape) -> Vector2 #must #foreign box2d;
EdgeShape_set_v2 :: (self: *b2EdgeShape, v2: Vector2) -> void #foreign box2d;
EdgeShape_get_v0 :: (self: *b2EdgeShape, v0: *Vector2) -> bool #must #foreign box2d;
EdgeShape_set_v0 :: (self: *b2EdgeShape, v0: *Vector2) -> void #foreign box2d;
EdgeShape_get_v3 :: (self: *b2EdgeShape, v3: *Vector2) -> bool #must #foreign box2d;
EdgeShape_set_v3 :: (self: *b2EdgeShape, v3: *Vector2) -> void #foreign box2d;
PolygonShape_new :: () -> *b2PolygonShape #must #foreign box2d;
PolygonShape_drop :: (self: *b2PolygonShape) -> void #foreign box2d;
PolygonShape_as_shape :: (self: *b2PolygonShape) -> *b2Shape #must #foreign box2d;
Shape_as_polygon_shape :: (self: *b2Shape) -> *b2PolygonShape #must #foreign box2d;
PolygonShape_set :: (self: *b2PolygonShape, points: *Vector2, count: s32) -> void #foreign box2d;
PolygonShape_set_as_box :: (self: *b2PolygonShape, hw: float, hh: float) -> void #foreign box2d;
PolygonShape_set_as_oriented_box :: (self: *b2PolygonShape, hw: float, hh: float, center: *Vector2, angle: float) -> void #foreign box2d;
PolygonShape_get_vertex_count :: (self: *b2PolygonShape) -> s32 #must #foreign box2d;
PolygonShape_get_vertex :: (self: *b2PolygonShape, index: s32) -> *Vector2 #must #foreign box2d;
PolygonShape_validate :: (self: *b2PolygonShape) -> bool #must #foreign box2d;
Shape_drop_virtual :: (self: *b2Shape) -> void #foreign box2d;
Shape_get_type :: (self: *b2Shape) -> s32 #must #foreign box2d;
Shape_get_child_count_virtual :: (self: *b2Shape) -> s32 #must #foreign box2d;
Shape_test_point_virtual :: (self: *b2Shape, xf: *b2Transform, p: *Vector2) -> bool #must #foreign box2d;
Shape_ray_cast_virtual :: (self: *b2Shape, output: *b2RayCastOutput, input: *b2RayCastInput, transform: *b2Transform, child_id: s32) -> bool #must #foreign box2d;
Shape_compute_aabb_virtual :: (self: *b2Shape, aabb: *b2AABB, xf: *b2Transform, child_id: s32) -> void #foreign box2d;
Shape_compute_mass_virtual :: (self: *b2Shape, data: *b2MassData, density: float) -> void #foreign box2d;
Shape_get_radius :: (self: *b2Shape) -> float #must #foreign box2d;
Shape_set_radius :: (self: *b2Shape, radius: float) -> void #foreign box2d;
World_create_distance_joint :: (self: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, local_anchor_a: Vector2, local_anchor_b: Vector2, length: float, frequency: float, damping_ratio: float) -> *b2Joint #must #foreign box2d;
DistanceJointDef_initialize :: (self: *b2DistanceJointDef, body_a: *b2Body, body_b: *b2Body, anchor_a: *Vector2, anchor_b: *Vector2) -> void #foreign box2d;
DistanceJoint_as_joint :: (self: *b2DistanceJoint) -> *b2Joint #must #foreign box2d;
Joint_as_distance_joint :: (self: *b2Joint) -> *b2DistanceJoint #must #foreign box2d;
DistanceJoint_get_local_anchor_a :: (self: *b2DistanceJoint) -> *Vector2 #must #foreign box2d;
DistanceJoint_get_local_anchor_b :: (self: *b2DistanceJoint) -> *Vector2 #must #foreign box2d;
DistanceJoint_set_length :: (self: *b2DistanceJoint, length: float) -> void #foreign box2d;
DistanceJoint_get_length :: (self: *b2DistanceJoint) -> float #must #foreign box2d;
DistanceJoint_set_frequency :: (self: *b2DistanceJoint, hz: float) -> void #foreign box2d;
DistanceJoint_get_frequency :: (self: *b2DistanceJoint) -> float #must #foreign box2d;
DistanceJoint_set_damping_ratio :: (self: *b2DistanceJoint, ratio: float) -> void #foreign box2d;
DistanceJoint_get_damping_ratio :: (self: *b2DistanceJoint) -> float #must #foreign box2d;
World_create_friction_joint :: (self: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, local_anchor_a: Vector2, local_anchor_b: Vector2, max_force: float, max_torque: float) -> *b2Joint #must #foreign box2d;
FrictionJointDef_initialize :: (self: *b2FrictionJointDef, body_a: *b2Body, body_b: *b2Body, anchor: *Vector2) -> void #foreign box2d;
FrictionJoint_as_joint :: (self: *b2FrictionJoint) -> *b2Joint #must #foreign box2d;
Joint_as_friction_joint :: (self: *b2Joint) -> *b2FrictionJoint #must #foreign box2d;
FrictionJoint_get_local_anchor_a :: (self: *b2FrictionJoint) -> *Vector2 #must #foreign box2d;
FrictionJoint_get_local_anchor_b :: (self: *b2FrictionJoint) -> *Vector2 #must #foreign box2d;
FrictionJoint_set_max_force :: (self: *b2FrictionJoint, force: float) -> void #foreign box2d;
FrictionJoint_get_max_force :: (self: *b2FrictionJoint) -> float #must #foreign box2d;
FrictionJoint_set_max_torque :: (self: *b2FrictionJoint, torque: float) -> void #foreign box2d;
FrictionJoint_get_max_torque :: (self: *b2FrictionJoint) -> float #must #foreign box2d;
World_create_gear_joint :: (self: *b2World, collide_connected: bool, joint_a: *b2Joint, joint_b: *b2Joint, ratio: float) -> *b2Joint #must #foreign box2d;
GearJoint_as_joint :: (self: *b2GearJoint) -> *b2Joint #must #foreign box2d;
Joint_as_gear_joint :: (self: *b2Joint) -> *b2GearJoint #must #foreign box2d;
GearJoint_get_joint_1 :: (self: *b2GearJoint) -> *b2Joint #must #foreign box2d;
GearJoint_get_joint_2 :: (self: *b2GearJoint) -> *b2Joint #must #foreign box2d;
GearJoint_set_ratio :: (self: *b2GearJoint, ratio: float) -> void #foreign box2d;
GearJoint_get_ratio :: (self: *b2GearJoint) -> float #must #foreign box2d;
Joint_get_type :: (self: *b2Joint) -> s32 #must #foreign box2d;
Joint_get_body_a :: (self: *b2Joint) -> *b2Body #must #foreign box2d;
Joint_get_body_b :: (self: *b2Joint) -> *b2Body #must #foreign box2d;
Joint_get_anchor_a_virtual :: (self: *b2Joint) -> Vector2 #must #foreign box2d;
Joint_get_anchor_b_virtual :: (self: *b2Joint) -> Vector2 #must #foreign box2d;
Joint_get_reaction_force_virtual :: (self: *b2Joint, inv_dt: float) -> Vector2 #must #foreign box2d;
Joint_get_reaction_torque_virtual :: (self: *b2Joint, inv_dt: float) -> float #must #foreign box2d;
Joint_get_next :: (self: *b2Joint) -> *b2Joint #must #foreign box2d;
Joint_get_user_data :: (self: *b2Joint) -> *void #must #foreign box2d;
Joint_set_user_data :: (self: *b2Joint, data: *void) -> void #foreign box2d;
Joint_is_active :: (self: *b2Joint) -> bool #must #foreign box2d;
Joint_get_collide_connected :: (self: *b2Joint) -> bool #must #foreign box2d;
Joint_dump_virtual :: (self: *b2Joint) -> void #foreign box2d;
Joint_shift_origin_virtual :: (self: *b2Joint, origin: *Vector2) -> void #foreign box2d;
World_create_motor_joint :: (self: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, linear_offset: Vector2, angular_offset: float, max_force: float, max_torque: float, correction_factor: float) -> *b2Joint #must #foreign box2d;
MotorJointDef_initialize :: (self: *b2MotorJointDef, body_a: *b2Body, body_b: *b2Body) -> void #foreign box2d;
MotorJoint_as_joint :: (self: *b2MotorJoint) -> *b2Joint #must #foreign box2d;
Joint_as_motor_joint :: (self: *b2Joint) -> *b2MotorJoint #must #foreign box2d;
MotorJoint_set_linear_offset :: (self: *b2MotorJoint, offset: *Vector2) -> void #foreign box2d;
MotorJoint_get_linear_offset :: (self: *b2MotorJoint) -> *Vector2 #must #foreign box2d;
MotorJoint_set_angular_offset :: (self: *b2MotorJoint, offset: float) -> void #foreign box2d;
MotorJoint_get_angular_offset :: (self: *b2MotorJoint) -> float #must #foreign box2d;
MotorJoint_set_max_force :: (self: *b2MotorJoint, force: float) -> void #foreign box2d;
MotorJoint_get_max_force :: (self: *b2MotorJoint) -> float #must #foreign box2d;
MotorJoint_set_max_torque :: (self: *b2MotorJoint, torque: float) -> void #foreign box2d;
MotorJoint_get_max_torque :: (self: *b2MotorJoint) -> float #must #foreign box2d;
MotorJoint_set_correction_factor :: (self: *b2MotorJoint, factor: float) -> void #foreign box2d;
MotorJoint_get_correction_factor :: (self: *b2MotorJoint) -> float #must #foreign box2d;
World_create_mouse_joint :: (self: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, target: Vector2, max_force: float, frequency: float, damping_ratio: float) -> *b2Joint #must #foreign box2d;
MouseJoint_as_joint :: (self: *b2MouseJoint) -> *b2Joint #must #foreign box2d;
Joint_as_mouse_joint :: (self: *b2Joint) -> *b2MouseJoint #must #foreign box2d;
MouseJoint_set_target :: (self: *b2MouseJoint, target: *Vector2) -> void #foreign box2d;
MouseJoint_get_target :: (self: *b2MouseJoint) -> *Vector2 #must #foreign box2d;
MouseJoint_set_max_force :: (self: *b2MouseJoint, force: float) -> void #foreign box2d;
MouseJoint_get_max_force :: (self: *b2MouseJoint) -> float #must #foreign box2d;
MouseJoint_set_frequency :: (self: *b2MouseJoint, hz: float) -> void #foreign box2d;
MouseJoint_get_frequency :: (self: *b2MouseJoint) -> float #must #foreign box2d;
MouseJoint_set_damping_ratio :: (self: *b2MouseJoint, ratio: float) -> void #foreign box2d;
MouseJoint_get_damping_ratio :: (self: *b2MouseJoint) -> float #must #foreign box2d;
World_create_prismatic_joint :: (self: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, local_anchor_a: Vector2, local_anchor_b: Vector2, local_axis_a: Vector2, reference_angle: float, enable_limit: bool, lower_translation: float, upper_translation: float, enable_motor: bool, max_motor_force: float, motor_speed: float) -> *b2Joint #must #foreign box2d;
PrismaticJointDef_initialize :: (self: *b2PrismaticJointDef, body_a: *b2Body, body_b: *b2Body, anchor: *Vector2, axis: *Vector2) -> void #foreign box2d;
PrismaticJoint_as_joint :: (self: *b2PrismaticJoint) -> *b2Joint #must #foreign box2d;
Joint_as_prismatic_joint :: (self: *b2Joint) -> *b2PrismaticJoint #must #foreign box2d;
PrismaticJoint_get_local_anchor_a :: (self: *b2PrismaticJoint) -> *Vector2 #must #foreign box2d;
PrismaticJoint_get_local_anchor_b :: (self: *b2PrismaticJoint) -> *Vector2 #must #foreign box2d;
PrismaticJoint_get_local_axis_a :: (self: *b2PrismaticJoint) -> *Vector2 #must #foreign box2d;
PrismaticJoint_get_reference_angle :: (self: *b2PrismaticJoint) -> float #must #foreign box2d;
PrismaticJoint_get_joint_translation :: (self: *b2PrismaticJoint) -> float #must #foreign box2d;
PrismaticJoint_get_joint_speed :: (self: *b2PrismaticJoint) -> float #must #foreign box2d;
PrismaticJoint_is_limit_enabled :: (self: *b2PrismaticJoint) -> bool #must #foreign box2d;
PrismaticJoint_enable_limit :: (self: *b2PrismaticJoint, flag: bool) -> void #foreign box2d;
PrismaticJoint_get_lower_limit :: (self: *b2PrismaticJoint) -> float #must #foreign box2d;
PrismaticJoint_get_upper_limit :: (self: *b2PrismaticJoint) -> float #must #foreign box2d;
PrismaticJoint_set_limits :: (self: *b2PrismaticJoint, lower: float, upper: float) -> void #foreign box2d;
PrismaticJoint_is_motor_enabled :: (self: *b2PrismaticJoint) -> bool #must #foreign box2d;
PrismaticJoint_enable_motor :: (self: *b2PrismaticJoint, flag: bool) -> void #foreign box2d;
PrismaticJoint_set_motor_speed :: (self: *b2PrismaticJoint, speed: float) -> void #foreign box2d;
PrismaticJoint_get_motor_speed :: (self: *b2PrismaticJoint) -> float #must #foreign box2d;
PrismaticJoint_set_max_motor_force :: (self: *b2PrismaticJoint, force: float) -> void #foreign box2d;
PrismaticJoint_get_max_motor_force :: (self: *b2PrismaticJoint) -> float #must #foreign box2d;
PrismaticJoint_get_motor_force :: (self: *b2PrismaticJoint, inv_dt: float) -> float #must #foreign box2d;
World_create_pulley_joint :: (self: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, ground_anchor_a: Vector2, ground_anchor_b: Vector2, local_anchor_a: Vector2, local_anchor_b: Vector2, length_a: float, length_b: float, ratio: float) -> *b2Joint #must #foreign box2d;
PulleyJointDef_initialize :: (self: *b2PulleyJointDef, body_a: *b2Body, body_b: *b2Body, ground_anchor_a: *Vector2, ground_anchor_b: *Vector2, anchor_a: *Vector2, anchor_b: *Vector2, ratio: float) -> void #foreign box2d;
PulleyJoint_as_joint :: (self: *b2PulleyJoint) -> *b2Joint #must #foreign box2d;
Joint_as_pulley_joint :: (self: *b2Joint) -> *b2PulleyJoint #must #foreign box2d;
PulleyJoint_get_ground_anchor_a :: (self: *b2PulleyJoint) -> Vector2 #must #foreign box2d;
PulleyJoint_get_ground_anchor_b :: (self: *b2PulleyJoint) -> Vector2 #must #foreign box2d;
PulleyJoint_get_length_a :: (self: *b2PulleyJoint) -> float #must #foreign box2d;
PulleyJoint_get_length_b :: (self: *b2PulleyJoint) -> float #must #foreign box2d;
PulleyJoint_get_ratio :: (self: *b2PulleyJoint) -> float #must #foreign box2d;
PulleyJoint_get_current_length_a :: (self: *b2PulleyJoint) -> float #must #foreign box2d;
PulleyJoint_get_current_length_b :: (self: *b2PulleyJoint) -> float #must #foreign box2d;
World_create_revolute_joint :: (world: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, local_anchor_a: Vector2, local_anchor_b: Vector2, reference_angle: float, enable_limit: bool, lower_angle: float, upper_angle: float, enable_motor: bool, motor_speed: float, max_motor_torque: float) -> *b2Joint #must #foreign box2d;
RevoluteJointDef_initialize :: (self: *b2RevoluteJointDef, body_a: *b2Body, body_b: *b2Body, anchor: *Vector2) -> void #foreign box2d;
RevoluteJoint_as_joint :: (self: *b2RevoluteJoint) -> *b2Joint #must #foreign box2d;
Joint_as_revolute_joint :: (self: *b2Joint) -> *b2RevoluteJoint #must #foreign box2d;
RevoluteJoint_get_local_anchor_a :: (self: *b2RevoluteJoint) -> *Vector2 #must #foreign box2d;
RevoluteJoint_get_local_anchor_b :: (self: *b2RevoluteJoint) -> *Vector2 #must #foreign box2d;
RevoluteJoint_get_reference_angle :: (self: *b2RevoluteJoint) -> float #must #foreign box2d;
RevoluteJoint_get_joint_angle :: (self: *b2RevoluteJoint) -> float #must #foreign box2d;
RevoluteJoint_get_joint_speed :: (self: *b2RevoluteJoint) -> float #must #foreign box2d;
RevoluteJoint_is_limit_enabled :: (self: *b2RevoluteJoint) -> bool #must #foreign box2d;
RevoluteJoint_enable_limit :: (self: *b2RevoluteJoint, flag: bool) -> void #foreign box2d;
RevoluteJoint_get_lower_limit :: (self: *b2RevoluteJoint) -> float #must #foreign box2d;
RevoluteJoint_get_upper_limit :: (self: *b2RevoluteJoint) -> float #must #foreign box2d;
RevoluteJoint_set_limits :: (self: *b2RevoluteJoint, lower: float, upper: float) -> void #foreign box2d;
RevoluteJoint_is_motor_enabled :: (self: *b2RevoluteJoint) -> bool #must #foreign box2d;
RevoluteJoint_enable_motor :: (self: *b2RevoluteJoint, flag: bool) -> void #foreign box2d;
RevoluteJoint_set_motor_speed :: (self: *b2RevoluteJoint, speed: float) -> void #foreign box2d;
RevoluteJoint_get_motor_speed :: (self: *b2RevoluteJoint) -> float #must #foreign box2d;
RevoluteJoint_set_max_motor_torque :: (self: *b2RevoluteJoint, torque: float) -> void #foreign box2d;
RevoluteJoint_get_max_motor_torque :: (self: *b2RevoluteJoint) -> float #must #foreign box2d;
RevoluteJoint_get_motor_torque :: (self: *b2RevoluteJoint, inv_dt: float) -> float #must #foreign box2d;
World_create_rope_joint :: (world: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, local_anchor_a: Vector2, local_anchor_b: Vector2, max_length: float) -> *b2Joint #must #foreign box2d;
RopeJoint_as_joint :: (self: *b2RopeJoint) -> *b2Joint #must #foreign box2d;
Joint_as_rope_joint :: (self: *b2Joint) -> *b2RopeJoint #must #foreign box2d;
RopeJoint_get_local_anchor_a :: (self: *b2RopeJoint) -> *Vector2 #must #foreign box2d;
RopeJoint_get_local_anchor_b :: (self: *b2RopeJoint) -> *Vector2 #must #foreign box2d;
RopeJoint_set_max_length :: (self: *b2RopeJoint, length: float) -> void #foreign box2d;
RopeJoint_get_max_length :: (self: *b2RopeJoint) -> float #must #foreign box2d;
RopeJoint_get_limit_state :: (self: *b2RopeJoint) -> b2LimitState #must #foreign box2d;
World_create_weld_joint :: (world: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, local_anchor_a: Vector2, local_anchor_b: Vector2, reference_angle: float, frequency: float, damping_ratio: float) -> *b2Joint #must #foreign box2d;
WeldJointDef_initialize :: (self: *b2WeldJointDef, body_a: *b2Body, body_b: *b2Body, anchor: *Vector2) -> void #foreign box2d;
WeldJoint_as_joint :: (self: *b2WeldJoint) -> *b2Joint #must #foreign box2d;
Joint_as_weld_joint :: (self: *b2Joint) -> *b2WeldJoint #must #foreign box2d;
WeldJoint_get_local_anchor_a :: (self: *b2WeldJoint) -> *Vector2 #must #foreign box2d;
WeldJoint_get_local_anchor_b :: (self: *b2WeldJoint) -> *Vector2 #must #foreign box2d;
WeldJoint_get_reference_angle :: (self: *b2WeldJoint) -> float #must #foreign box2d;
WeldJoint_set_frequency :: (self: *b2WeldJoint, frequency: float) -> void #foreign box2d;
WeldJoint_get_frequency :: (self: *b2WeldJoint) -> float #must #foreign box2d;
WeldJoint_set_damping_ratio :: (self: *b2WeldJoint, ratio: float) -> void #foreign box2d;
WeldJoint_get_damping_ratio :: (self: *b2WeldJoint) -> float #must #foreign box2d;
World_create_wheel_joint :: (world: *b2World, body_a: *b2Body, body_b: *b2Body, collide_connected: bool, local_anchor_a: Vector2, local_anchor_b: Vector2, local_axis_a: Vector2, enable_motor: bool, max_motor_torque: float, motor_speed: float, frequency: float, damping_ratio: float) -> *b2Joint #must #foreign box2d;
WheelJointDef_initialize :: (self: *b2WheelJointDef, body_a: *b2Body, body_b: *b2Body, anchor: *Vector2, axis: *Vector2) -> void #foreign box2d;
WheelJoint_as_joint :: (self: *b2WheelJoint) -> *b2Joint #must #foreign box2d;
Joint_as_wheel_joint :: (self: *b2Joint) -> *b2WheelJoint #must #foreign box2d;
WheelJoint_get_local_anchor_a :: (self: *b2WheelJoint) -> *Vector2 #must #foreign box2d;
WheelJoint_get_local_anchor_b :: (self: *b2WheelJoint) -> *Vector2 #must #foreign box2d;
WheelJoint_get_local_axis_a :: (self: *b2WheelJoint) -> *Vector2 #must #foreign box2d;
WheelJoint_get_joint_translation :: (self: *b2WheelJoint) -> float #must #foreign box2d;
WheelJoint_get_joint_speed :: (self: *b2WheelJoint) -> float #must #foreign box2d;
WheelJoint_is_motor_enabled :: (self: *b2WheelJoint) -> bool #must #foreign box2d;
WheelJoint_enable_motor :: (self: *b2WheelJoint, flag: bool) -> void #foreign box2d;
WheelJoint_set_motor_speed :: (self: *b2WheelJoint, speed: float) -> void #foreign box2d;
WheelJoint_get_motor_speed :: (self: *b2WheelJoint) -> float #must #foreign box2d;
WheelJoint_set_max_motor_torque :: (self: *b2WheelJoint, torque: float) -> void #foreign box2d;
WheelJoint_get_max_motor_torque :: (self: *b2WheelJoint) -> float #must #foreign box2d;
WheelJoint_get_motor_torque :: (self: *b2WheelJoint, inv_dt: float) -> float #must #foreign box2d;
WheelJoint_set_spring_frequency :: (self: *b2WheelJoint, frequency: float) -> void #foreign box2d;
WheelJoint_get_spring_frequency :: (self: *b2WheelJoint) -> float #must #foreign box2d;
WheelJoint_set_spring_damping_ratio :: (self: *b2WheelJoint, ratio: float) -> void #foreign box2d;
WheelJoint_get_spring_damping_ratio :: (self: *b2WheelJoint) -> float #must #foreign box2d;
