#run {
    assert(size_of(b2TrackedBlockAllocator) == 16, tprint("b2TrackedBlockAllocator must be of size 16. Instead it's %.", size_of(b2TrackedBlockAllocator)));
    assert(size_of(b2StackAllocator) == 102936, "b2StackAllocator must be of size 102936.");
    assert(size_of(b2BroadPhase) == 80, "b2BroadPhase must be of size 80.");
    assert(size_of(b2ContactManager) == 120, "b2ContactManager must be of size 120.");
    assert(size_of(b2Profile) == 32, "b2Profile must be of size 32.");
    assert(size_of(b2WorldManifold) == 32, "b2WorldManifold must be of size 32.");
    assert(size_of(b2Manifold) == 64, "b2Manifold must be of size 64.");
    assert(size_of(b2Transform) == 16, "b2Transform must be of size 16.");
    assert(size_of(b2PointState) == 4, "b2PointState must be of size 4.");
    assert(size_of(b2AABB) == 16, "b2AABB must be of size 16.");
    assert(size_of(b2RayCastOutput) == 12, "b2RayCastOutput must be of size 12.");
    assert(size_of(b2RayCastInput) == 20, "b2RayCastInput must be of size 20.");
    assert(size_of(b2CircleShape) == 24, "b2CircleShape must be of size 24.");
    assert(size_of(b2PolygonShape) == 160, "b2PolygonShape must be of size 160.");
    assert(size_of(b2EdgeShape) == 56, "b2EdgeShape must be of size 56.");
    assert(size_of(b2ClipVertex) == 12, "b2ClipVertex must be of size 12.");
    assert(size_of(b2Shape) == 16, "b2Shape must be of size 16.");
    assert(size_of(Draw) == 80, "Draw must be of size 80.");
    assert(size_of(DrawPolygonCB) == 8, "DrawPolygonCB must be of size 8.");
    assert(size_of(DrawSolidPolygonCB) == 8, "DrawSolidPolygonCB must be of size 8.");
    assert(size_of(DrawCircleCB) == 8, "DrawCircleCB must be of size 8.");
    assert(size_of(DrawSolidCircleCB) == 8, "DrawSolidCircleCB must be of size 8.");
    assert(size_of(DrawParticlesCB) == 8, "DrawParticlesCB must be of size 8.");
    assert(size_of(DrawSegmentCB) == 8, "DrawSegmentCB must be of size 8.");
    assert(size_of(DrawTransformCB) == 8, "DrawTransformCB must be of size 8.");
    assert(size_of(DrawPointCB) == 8, "DrawPointCB must be of size 8.");
    assert(size_of(b2Draw) == 16, "b2Draw must be of size 16.");
    assert(size_of(b2BodyDef) == 64, "b2BodyDef must be of size 64.");
    assert(size_of(b2Fixture) == 80, "b2Fixture must be of size 80.");
    assert(size_of(b2Body) == 200, "b2Body must be of size 200.");
    assert(size_of(b2FixtureDef) == 40, "b2FixtureDef must be of size 40.");
    assert(size_of(b2MassData) == 16, "b2MassData must be of size 16.");
    assert(size_of(b2BodyType) == 4, "b2BodyType must be of size 4.");
    assert(size_of(b2JointEdge) == 32, "b2JointEdge must be of size 32.");
    assert(size_of(b2ContactEdge) == 32, "b2ContactEdge must be of size 32.");
    assert(size_of(b2World) == 103312, "b2World must be of size 103312.");
    assert(size_of(b2Filter) == 6, "b2Filter must be of size 6.");
    assert(size_of(b2DestructionListener) == 8, "b2DestructionListener must be of size 8.");
    assert(size_of(b2ContactFilter) == 8, "b2ContactFilter must be of size 8.");
    assert(size_of(b2ContactListener) == 8, "b2ContactListener must be of size 8.");
    assert(size_of(b2Joint) == 128, "b2Joint must be of size 128.");
    assert(size_of(b2JointDef) == 40, "b2JointDef must be of size 40.");
    assert(size_of(b2ParticleSystem) == 632, "b2ParticleSystem must be of size 632.");
    assert(size_of(b2ParticleSystemDef) == 84, "b2ParticleSystemDef must be of size 84.");
    assert(size_of(b2QueryCallback) == 8, "b2QueryCallback must be of size 8.");
    assert(size_of(b2RayCastCallback) == 8, "b2RayCastCallback must be of size 8.");
    assert(size_of(b2Contact) == 208, "b2Contact must be of size 208.");
    assert(size_of(DestructionListener) == 32, "DestructionListener must be of size 32.");
    assert(size_of(SayGoodbyeJointCB) == 8, "SayGoodbyeJointCB must be of size 8.");
    assert(size_of(SayGoodbyeFixtureCB) == 8, "SayGoodbyeFixtureCB must be of size 8.");
    assert(size_of(SayGoodbyeParticleGroupCB) == 8, "SayGoodbyeParticleGroupCB must be of size 8.");
    assert(size_of(ContactFilter) == 32, "ContactFilter must be of size 32.");
    assert(size_of(ShouldCollideCB) == 8, "ShouldCollideCB must be of size 8.");
    assert(size_of(ShouldCollideFixtureParticleCB) == 8, "ShouldCollideFixtureParticleCB must be of size 8.");
    assert(size_of(ShouldCollideParticleParticleCB) == 8, "ShouldCollideParticleParticleCB must be of size 8.");
    assert(size_of(ContactListener) == 72, "ContactListener must be of size 72.");
    assert(size_of(BeginContactCB) == 8, "BeginContactCB must be of size 8.");
    assert(size_of(EndContactCB) == 8, "EndContactCB must be of size 8.");
    assert(size_of(BeginContactParticleBodyCB) == 8, "BeginContactParticleBodyCB must be of size 8.");
    assert(size_of(EndContactFixtureParticleCB) == 8, "EndContactFixtureParticleCB must be of size 8.");
    assert(size_of(BeginContactParticleCB) == 8, "BeginContactParticleCB must be of size 8.");
    assert(size_of(EndContactParticleCB) == 8, "EndContactParticleCB must be of size 8.");
    assert(size_of(PreSolveCB) == 8, "PreSolveCB must be of size 8.");
    assert(size_of(PostSolveCB) == 8, "PostSolveCB must be of size 8.");
    assert(size_of(QueryCallback) == 32, "QueryCallback must be of size 32.");
    assert(size_of(ReportFixtureCB) == 8, "ReportFixtureCB must be of size 8.");
    assert(size_of(ReportParticleCB) == 8, "ReportParticleCB must be of size 8.");
    assert(size_of(ShouldQueryParticleSystemCB) == 8, "ShouldQueryParticleSystemCB must be of size 8.");
    assert(size_of(RayCastCallback) == 32, "RayCastCallback must be of size 32.");
    assert(size_of(ReportFixtureRayCastCB) == 8, "ReportFixtureRayCastCB must be of size 8.");
    assert(size_of(ReportParticleRayCastCB) == 8, "ReportParticleRayCastCB must be of size 8.");
    assert(size_of(ShouldQueryParticleSystemRayCastCB) == 8, "ShouldQueryParticleSystemRayCastCB must be of size 8.");
    assert(size_of(b2ParticleDef) == 48, "b2ParticleDef must be of size 48.");
    assert(size_of(b2ParticleGroupDef) == 120, "b2ParticleGroupDef must be of size 120.");
    assert(size_of(b2ParticleGroup) == 96, "b2ParticleGroup must be of size 96.");
    assert(size_of(b2ParticleContact) == 24, "b2ParticleContact must be of size 24.");
    assert(size_of(b2ParticleHandle) == 24, "b2ParticleHandle must be of size 24.");
    assert(size_of(b2ParticleColor) == 4, "b2ParticleColor must be of size 4.");
    assert(size_of(b2ParticleBodyContact) == 40, "b2ParticleBodyContact must be of size 40.");
    assert(size_of(b2ParticlePair) == 20, "b2ParticlePair must be of size 20.");
    assert(size_of(b2ParticleTriad) == 60, "b2ParticleTriad must be of size 60.");
    assert(size_of(b2ChainShape) == 48, "b2ChainShape must be of size 48.");
    assert(size_of(b2BlockAllocator) == 144, "b2BlockAllocator must be of size 144.");
    assert(size_of(b2DistanceJointDef) == 80, "b2DistanceJointDef must be of size 80.");
    assert(size_of(b2DistanceJoint) == 264, "b2DistanceJoint must be of size 264.");
    assert(size_of(b2FrictionJointDef) == 64, "b2FrictionJointDef must be of size 64.");
    assert(size_of(b2FrictionJoint) == 240, "b2FrictionJoint must be of size 240.");
    assert(size_of(b2GearJointDef) == 64, "b2GearJointDef must be of size 64.");
    assert(size_of(b2GearJoint) == 360, "b2GearJoint must be of size 360.");
    assert(size_of(b2JointType) == 4, "b2JointType must be of size 4.");
    assert(size_of(b2MotorJointDef) == 64, "b2MotorJointDef must be of size 64.");
    assert(size_of(b2MotorJoint) == 256, "b2MotorJoint must be of size 256.");
    assert(size_of(b2MouseJointDef) == 64, "b2MouseJointDef must be of size 64.");
    assert(size_of(b2MouseJoint) == 232, "b2MouseJoint must be of size 232.");
    assert(size_of(b2PrismaticJointDef) == 96, "b2PrismaticJointDef must be of size 96.");
    assert(size_of(b2PrismaticJoint) == 304, "b2PrismaticJoint must be of size 304.");
    assert(size_of(b2PulleyJointDef) == 88, "b2PulleyJointDef must be of size 88.");
    assert(size_of(b2PulleyJoint) == 256, "b2PulleyJoint must be of size 256.");
    assert(size_of(b2RevoluteJointDef) == 88, "b2RevoluteJointDef must be of size 88.");
    assert(size_of(b2RevoluteJoint) == 272, "b2RevoluteJoint must be of size 272.");
    assert(size_of(b2RopeTuning) == 40, "b2RopeTuning must be of size 40.");
    assert(size_of(b2RopeDef) == 80, "b2RopeDef must be of size 80.");
    assert(size_of(b2Rope) == 128, "b2Rope must be of size 128.");
    assert(size_of(b2WeldJointDef) == 72, "b2WeldJointDef must be of size 72.");
    assert(size_of(b2WeldJoint) == 272, "b2WeldJoint must be of size 272.");
    assert(size_of(b2WheelJointDef) == 96, "b2WheelJointDef must be of size 96.");
    assert(size_of(b2WheelJoint) == 312, "b2WheelJoint must be of size 312.");
    assert(size_of(b2Mat22) == 16, "b2Mat22 must be of size 16.");
    assert(size_of(b2Mat33) == 36, "b2Mat33 must be of size 36.");
    assert(size_of(b2Sweep) == 36, "b2Sweep must be of size 36.");
    assert(size_of(b2ContactImpulse) == 20, "b2ContactImpulse must be of size 20.");
    assert(size_of(b2BlockAllocator) == 144, "b2BlockAllocator must be of size 144.");
    assert(size_of(b2FixtureProxy) == 32, "b2FixtureProxy must be of size 32.");
    assert(size_of(b2StackEntry) == 16, "b2StackEntry must be of size 16.");
    assert(size_of(b2JointType) == 4, "b2JointType must be of size 4.");
    assert(size_of(b2DynamicTree) == 32, "b2DynamicTree must be of size 32.");
    assert(size_of(b2Pair) == 8, "b2Pair must be of size 8.");
    assert(size_of(b2TreeNode) == 48, "b2TreeNode must be of size 48.");
    assert(size_of(b2ManifoldPoint) == 20, "b2ManifoldPoint must be of size 20.");
    assert(size_of(b2ContactFeature) == 4, "b2ContactFeature must be of size 4.");
    assert(size_of(b2Rot) == 8, "b2Rot must be of size 8.");
    assert(size_of(b2ContactID) == 4, "b2ContactID must be of size 4.");
    assert(size_of(b2StretchingModel) == 4, "b2StretchingModel must be of size 4.");
    assert(size_of(b2BendingModel) == 4, "b2BendingModel must be of size 4.");
    assert(size_of(b2Color) == 16, "b2Color must be of size 16.");
    assert(size_of(b2IntrusiveListNode) == 16, "b2IntrusiveListNode must be of size 16.");
    assert(size_of(b2FreeList) == 32, "b2FreeList must be of size 32.");
}

#scope_file

#import "Basic";
